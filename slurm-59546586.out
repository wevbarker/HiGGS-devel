Changed directory to /home/wb263/HiGGS_development.

JobID: 59546586
======
Time: Wed 27 Apr 12:17:54 BST 2022
Running on master node: cpu-e-264
Current directory: /home/wb263/HiGGS_development

Nodes allocated:
================
cpu-e-264 cpu-e-265

numtasks=64, numnodes=2, mpi_tasks_per_node=32 (OMP_NUM_THREADS=1)

Executing command:
==================
mpirun -ppn 32 -np 64 /home/wb263/HiGGS_development/peta4_jobs.sh 

mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’mkdir: cannot create directory ‘./bin/stats’: File exists
: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/stats’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’mkdir: cannot create directory ‘./bin/stats’: File exists
: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
mkdir: cannot create directory ‘./bin/samples’: File exists
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
MathLink could not create temporary directory /tmp/MathLink: file exists
The program may not function correctly
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.
Mathematica 12.1.0 Kernel for Linux x86 (64-bit)
Copyright 1988-2020 Wolfram Research, Inc.

In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)

In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)

In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[8]:= 
In[7]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[9]:= 
In[8]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[10]:= 
In[9]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[2]:= In[2]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[11]:= 
In[11]:= 
In[10]:= 
In[11]:= 
In[2]:= In[2]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[11]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[12]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[13]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[15]:= 
In[14]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[14]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[16]:= 
In[15]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[3]:= 
In[3]:= 
In[2]:= 
In[15]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[2]:= 
In[2]:= 
In[2]:= 
In[2]:= In[2]:= 
In[17]:= In[2]:= In[2]:= In[2]:= In[2]:= 
In[16]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[4]:= 
In[17]:= 
In[4]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[3]:= 
In[17]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 			(...replotting...)

In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= 
In[18]:= In[18]:= 
In[19]:=          
In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:= 
In[18]:= In[18]:= In[18]:=          
In[18]:= In[18]:= In[18]:= 
In[19]:=          
In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=          In[18]:= 
In[19]:= 
In[17]:= 
In[19]:=                            
In[20]:= 
In[19]:=          
In[19]:=          
In[19]:=          
In[18]:= In[18]:= In[18]:= In[18]:= 
In[21]:=          
In[19]:= 
In[20]:=                   

In[19]:=          
In[20]:= 
In[19]:=                   In[20]:=          
         
In[20]:=          In[20]:=          
In[20]:= 
In[21]:=          
In[20]:= 
In[20]:= 
In[21]:= 
In[21]:= 
In[19]:=          
In[21]:= 
In[21]:= 
In[21]:= 
In[21]:= 
In[21]:=                            
In[20]:= 
In[20]:= 
In[20]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[21]:= 
In[21]:=          
In[21]:= 
In[20]:= 
In[21]:= 
In[19]:=                   
In[20]:= 
In[21]:= 
In[5]:= 
In[5]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[6]:= 
In[6]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[7]:= 
In[7]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[8]:= 
In[8]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[9]:= 
In[9]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[10]:= 
In[10]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[11]:= 
In[11]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[12]:= 
In[12]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[13]:= 
In[13]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[14]:= 
In[14]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[15]:= 
In[15]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[16]:= 
In[16]:= 
In[15]:= 
In[15]:= 
In[15]:= 			(...replotting...)

In[15]:= 
In[15]:= 
In[17]:= 
In[17]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= 
In[17]:= In[18]:= In[18]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[19]:=          
In[19]:=                   
In[20]:= 
In[18]:= In[18]:= In[18]:=          In[18]:= 
In[20]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[21]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[21]:= 
In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=          
In[19]:= 
In[19]:=                   
In[19]:= 
In[19]:=                            
In[20]:=                   
In[20]:= 
In[20]:= 
In[21]:=                   
In[20]:= 
In[20]:= 
In[21]:= 
In[21]:= 
In[21]:= 
In[21]:= 			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
------------------------------------------------------------
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
			(...replotting...)
			(...replotting...)
			(...replotting...)
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
------------------------------------------------------------
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= 
In[2]:= In[2]:= 
In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=          
In[19]:=          
In[19]:=                   
In[20]:=          
In[21]:= 
In[20]:=          
In[21]:= 
In[20]:= 
In[21]:= Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connecting to external linux executable...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

In[2]:= ------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
In[2]:= 
In[3]:= 
In[4]:= 
In[2]:= In[2]:= 
In[5]:= 
In[2]:= In[2]:= 
In[3]:= 
In[6]:= 
In[3]:= 
In[4]:= 
In[7]:= 
In[4]:= 
In[5]:= 
In[8]:= 
In[5]:= 
In[6]:= 
In[9]:= 
In[6]:= 
In[7]:= 
In[10]:= 
In[7]:= 
In[8]:= 
In[11]:= 
In[8]:= 
In[9]:= 
In[12]:= 
In[9]:= 
In[10]:= 
In[13]:= 
In[10]:= 
In[11]:= 
In[14]:= 
In[11]:= 
In[12]:= 
In[15]:= 
In[12]:= 
In[13]:= 
In[16]:= 
In[13]:= 
In[14]:= 
In[17]:= 
In[14]:= 
In[15]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[15]:= 
In[16]:= 
In[19]:=                   
In[20]:= 
In[16]:= 
In[21]:= 
In[17]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=          
In[18]:= In[18]:= In[18]:= In[18]:=          
In[20]:= 
In[21]:= 
In[19]:=                   
In[20]:= 
In[21]:= 
In[2]:= 
In[2]:= 
In[2]:= 
In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= In[2]:= In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[3]:= In[2]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[15]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[16]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:= 
In[19]:= 
In[19]:=                            
In[19]:=          
In[19]:=          
In[18]:= 
In[19]:= In[18]:= In[18]:= In[18]:=                                     
In[20]:=          
In[20]:= 
In[20]:= 
In[20]:= 
In[18]:= In[18]:=          In[18]:= In[18]:= 
In[20]:= 
In[21]:= 
In[21]:= 
In[21]:= 
In[21]:=          
In[19]:= 
In[20]:=          
In[21]:= 
In[21]:= 
In[19]:=                   
In[20]:= 
In[21]:=          
In[20]:= 
In[21]:= 
In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[2]:= In[2]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[3]:= 
In[8]:= 
In[8]:= 
In[9]:= 
In[9]:= 
In[4]:= 
In[9]:= 
In[10]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[10]:= 
In[5]:= 
In[11]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[11]:= 
In[6]:= 
In[12]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[12]:= 
In[7]:= 
In[13]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[13]:= 
In[8]:= 
In[14]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[14]:= 
In[9]:= 
In[15]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[15]:= 
In[10]:= 
In[16]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[11]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[12]:= 
In[18]:= 
In[17]:= 
In[17]:= In[18]:= In[18]:= In[18]:= 
In[19]:=          
In[13]:=          
In[20]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[21]:= 
In[19]:= 
In[14]:=          
In[17]:=          
In[20]:= 
In[17]:= 
In[21]:= 
In[17]:= 
In[15]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=          
In[16]:= 
In[19]:=          
In[20]:= 
In[21]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[17]:=                   
In[20]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[21]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:= 
In[19]:=                   
In[19]:=                            
In[20]:= 
In[20]:= 
In[21]:= 
In[21]:=          
In[20]:= 
In[21]:= ------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Variable $PrePrint assigned value ScreenDollarIndices
** Option ContractMetrics of MakeRule changed from False to True
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
Connection established.
Connection established.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
------------------------------------------------------------
** Option ContractMetrics of MakeRule changed from False to True
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
------------------------------------------------------------
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
------------------------------------------------------------
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
** DefConstantSymbol: Defining constant symbol dim. 
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
------------------------------------------------------------
** DefConstantSymbol: Defining constant symbol dim. 
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
** Option CurvatureRelations of DefCovD changed from True to False
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
** Variable $CommuteCovDsOnScalars changed from True to False
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
Connecting to external linux executable...
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
Connecting to external linux executable...
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol dim. 
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
Connecting to external linux executable...
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
Connecting to external linux executable...
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Connecting to external linux executable...
Connecting to external linux executable...
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
------------------------------------------------------------
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
------------------------------------------------------------
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connection established.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Connecting to external linux executable...
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Variable $PrePrint assigned value ScreenDollarIndices
** Option ContractMetrics of MakeRule changed from False to True
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $CovDFormat changed from Prefix to Postfix
** Option MetricOn of MakeRule changed from None to All
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Option ContractMetrics of MakeRule changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
------------------------------------------------------------
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $PrePrint assigned value ScreenDollarIndices
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $CovDFormat changed from Prefix to Postfix
** Option MetricOn of MakeRule changed from None to All
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $PrePrint assigned value ScreenDollarIndices
** Option MetricOn of MakeRule changed from None to All
** Variable $CovDFormat changed from Prefix to Postfix
** Variable $CovDFormat changed from Prefix to Postfix
** Option ContractMetrics of MakeRule changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol dim. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
** Variable $CovDFormat changed from Postfix to Prefix
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Option CurvatureRelations of DefCovD changed from False to True
** Variable $CovDFormat changed from Postfix to Prefix
** Variable $CovDFormat changed from Postfix to Prefix
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** Option CurvatureRelations of DefCovD changed from False to True
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
** Variable $CovDFormat changed from Postfix to Prefix
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Option CurvatureRelations of DefCovD changed from False to True
** Variable $CovDFormat changed from Postfix to Prefix
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
** Variable $CovDFormat changed from Postfix to Prefix
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Option CurvatureRelations of DefCovD changed from False to True
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
------------------------------------------------------------
** Option CurvatureRelations of DefCovD changed from False to True
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
------------------------------------------------------------
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** Option CurvatureRelations of DefCovD changed from False to True
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True

In[1]:= 
In[1]:= 
In[1]:= 
PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.

PacletManager`CreatePaclet::badpi: 
   /home/wb263/.Mathematica/Paclets/Repository/Dataset-12.1.1.2/PacletInfo.m
     is not a properly formatted PacletInfo.wl or PacletInfo.m file.



PacletManager`CreatePaclet::badpi: 
   /home/wb263/.Mathematica/Paclets/Repository/Dataset-12.1.1.2/PacletInfo.m
     is not a properly formatted PacletInfo.wl or PacletInfo.m file.
PacletManager`CreatePaclet::badpi: 
   /home/wb263/.Mathematica/Paclets/Repository/Dataset-12.1.1.2/PacletInfo.m
     is not a properly formatted PacletInfo.wl or PacletInfo.m file.
PacletManager`CreatePaclet::badpi: 
   /home/wb263/.Mathematica/Paclets/Repository/Dataset-12.1.1.2/PacletInfo.m
     is not a properly formatted PacletInfo.wl or PacletInfo.m file.

In[1]:= 
In[1]:= 
In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= 
In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= ------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.

In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[1]:= 
In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[1]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= 
In[1]:= 
In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= 
In[1]:= 
In[1]:= ------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.

In[1]:= 
In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= ------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...

In[1]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[3]:= 
In[3]:= 
In[3]:= 
In[4]:= 
In[4]:= 
In[4]:= 
In[5]:= 
In[5]:= 
In[5]:= 
In[6]:= 
In[6]:= 
In[6]:= 
In[7]:= 
In[7]:= 
In[7]:= 
In[8]:= 
In[8]:= 
In[8]:= 
In[9]:= 
In[9]:= 
In[9]:= 
In[10]:= 
In[10]:= 
In[10]:= 
In[11]:= 
In[11]:= 
In[11]:= 
In[12]:= 
In[12]:= 
In[12]:= 
In[13]:= 
In[13]:= 
In[13]:= 
In[14]:= 
In[14]:= 
In[14]:= 
In[15]:= 
In[15]:= 
In[15]:= 
In[16]:= 
In[16]:= 
In[16]:= 
In[17]:= 
In[17]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= 
In[19]:= In[18]:= In[18]:= In[18]:=          
In[18]:= In[18]:= In[18]:= In[18]:=          
In[19]:= 
In[20]:=          
In[21]:= 
In[19]:=                   
In[20]:= 
In[21]:=          
In[20]:= 
In[21]:= Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connecting to external linux executable...
Connecting to external linux executable...
Connection established.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLInfo.m’: No such file or directory

In[1]:= 
In[2]:= In[2]:= 
In[2]:= In[2]:= 
In[3]:= 
In[3]:= 
In[4]:= 
In[4]:= 
In[5]:= 
In[5]:= 
In[6]:= 
In[6]:= 
In[7]:= 
In[7]:= 
In[8]:= 
In[8]:= 
In[9]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[10]:= 
In[13]:= 
In[11]:= 
In[14]:= 
In[12]:= 
In[15]:= 
In[13]:= 
In[16]:= 
In[14]:= 
In[17]:= 
In[15]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[16]:= 
In[19]:=                   
In[20]:= 
In[17]:= 
In[21]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLInfo.m’: No such file or directory
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
chmod: changing permissions of ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLLink.m’: No such file or directory
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLLink.m’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/HTTPClient.m’: No such file or directory

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= ------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/Kernel/init.m’: No such file or directory
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/Kernel/init.m’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libcrypto.so’: No such file or directory

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libcrypto.so’: No such file or directory
chmod: changing permissions of ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLInfo.m’: No such file or directory
chmod: changing permissions of ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLInfo.m’: No such file or directory
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...

In[1]:= 
In[1]:= Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

In[1]:= chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libcurl.so’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libcurl.so’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libcurlLink.so’: No such file or directory

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libcurlLink.so’: No such file or directory

In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLLink.m’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/CURLLink.m’: No such file or directory
chmod: changing permissions of ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libssh2.so’: No such file or directory

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libssl.so’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libssl.so’: No such file or directory

In[2]:= 
In[2]:= In[2]:= In[2]:= 
In[3]:= 
In[3]:= 
In[4]:= 
In[4]:= 
In[5]:= 
In[5]:= 
In[6]:= 
In[6]:= 
In[7]:= 
In[7]:= 
In[8]:= 
In[8]:= 
In[9]:= 
In[9]:= 
In[10]:= 
In[10]:= 
In[11]:= 
In[11]:= 
In[12]:= 
In[12]:= 
In[13]:= 
In[13]:= 
In[14]:= 
In[14]:= 
In[15]:= 
In[15]:= 
In[16]:= 
In[16]:= 
In[17]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=          
In[19]:=                   
In[20]:=          
In[20]:= 
In[21]:= 
In[21]:= ------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

In[1]:= Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/HTTPClient.m’: No such file or directory
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/HTTPClient.m’: No such file or directory
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux/libcrypto.so’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/MacOSX-x86-64/libssl.dylib’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux-x86-64/libcrypto.so’: No such file or directory
chmod: cannot access ‘/home/wb263/.Mathematica/Paclets/Repository/HTTPClient-10.1.33/LibraryResources/Linux-x86-64/libcrypto.so’: No such file or directory
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

In[22]:= 
In[22]:= 
In[23]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True


FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True


FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.



General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.



StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol Prt. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PR6.
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
   Rules {1} have been declared as UpValues for PT1.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefTensor: Defining tensor V[-a]. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor Ji[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor A[a, c, -d]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
** DefTensor: Defining weight +2 density DetG[]. Determinant.

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefTensor: Defining weight +2 density DetG[]. Determinant.

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefConstantSymbol: Defining constant symbol Prt. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol Prt. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
   Rules {1} have been declared as UpValues for PT1.
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
   Rules {1} have been declared as UpValues for PT2.
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
   Rules {1} have been declared as UpValues for PT3.
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
   Rules {1} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefTensor: Defining tensor HComp[]. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
   Rules {1} have been declared as DownValues for DVDB.
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
   Rules {1} have been declared as DownValues for DHDB.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
   Rules {1} have been declared as DownValues for DJDB.
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor BPi[-a, -c]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor BPiP[-a, -c]. 
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor H[-a, c]. 
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefTensor: Defining tensor Q[-a, -b]. 
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor Q[-a, -b]. 
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor PiPB1m[-a]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
Connecting to external linux executable...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP1m[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:=    Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
Connecting to external linux executable...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor ChiParaB0m[]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.

   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.

In[22]:= 
In[22]:= 
In[22]:= 
In[22]:= 
In[23]:= 
In[23]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

In[23]:= 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.

 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 


FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.


FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.


General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].


StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor DpPiPA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
   Rules {1, 2} have been declared as DownValues for DRP2p.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.



General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 

** DefCovD: Defining covariant derivative CD[-a]. 
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefVBundle: Defining vbundle TangentM4. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
** DefTensor: Defining tensor DPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefManifold: Defining manifold M4. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.


StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.

   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefTensor: Defining tensor DRP0p[-z]. 

   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefTensor: Defining tensor DRP0m[-z]. 

** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefManifold: Defining manifold M4. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefManifold: Defining manifold M4. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefVBundle: Defining vbundle TangentM4. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].


Syntax::sntufn: Unknown unicode longname Application.
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor T2[-i]. 
** DefManifold: Defining manifold M4. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor T3[-i]. 
** DefVBundle: Defining vbundle TangentM4. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
   Rules {1} have been declared as UpValues for PR3.
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 

** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor RLambda6[]. 
   Rules {1} have been declared as UpValues for PT3.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor T[a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor W[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor RLambda6[]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1} have been declared as UpValues for PT1.
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefConstantSymbol: Defining constant symbol Prt. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1} have been declared as UpValues for PR3.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1} have been declared as UpValues for PT3.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor T2[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol Prt. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda2[-i]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefConstantSymbol: Defining constant symbol cAlp2. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefTensor: Defining tensor T3[-i]. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp4. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet5. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2} have been declared as UpValues for V.
   Rules {1, 2} have been declared as UpValues for V.
   Rules {1, 2} have been declared as UpValues for V.
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor A[a, c, -d]. 
   Rules {1} have been declared as UpValues for PR3.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor G3[-a, -b]. 

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor G3[-a, -b]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1} have been declared as UpValues for PR5.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor T[a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda6[]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for PT3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor R6[]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor T1[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor T2[-i]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor HComp[]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1, 2} have been declared as DownValues for DUA2p.
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor DpUB0p[-z]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
   Rules {1} have been declared as DownValues for DLapseDB.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for H.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for PT3.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor RLambda6[]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor W[a, b, -d, -e]. 
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor Rs[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda2[-i]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefTensor: Defining tensor R6[]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefTensor: Defining tensor T2[-i]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefTensor: Defining tensor T3[-i]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
   Rules {1, 2} have been declared as UpValues for X.
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor X[k]. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefTensor: Defining tensor X[k]. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefConstantSymbol: Defining constant symbol Bet2. 
   Rules {1, 2} have been declared as UpValues for X.
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
   Rules {1, 2} have been declared as UpValues for X.
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor DpUA0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for PR6.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor RLambda6[]. 
   Rules {1} have been declared as UpValues for PT3.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor Rs[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor TPerp[-a, -b]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefTensor: Defining tensor HComp[]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
   Rules {1} have been declared as DownValues for DVDB.
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor BPi[-a, -c]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor BPiP[-a, -c]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor H[-a, c]. 
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
   Rules {1} have been declared as DownValues for DHDB.
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
   Rules {1} have been declared as DownValues for DJDB.
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
   Rules {1} have been declared as DownValues for DJiDB.
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
   Rules {1} have been declared as DownValues for DLapseDB.
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
   Rules {1} have been declared as UpValues for V.
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
   Rules {1} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
   Rules {1} have been declared as UpValues for J.
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
   Rules {1} have been declared as UpValues for Ji.
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor TPerp[-a, -b]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefTensor: Defining tensor X[k]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as UpValues for X.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
   Rules {1} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefTensor: Defining tensor DJ[-a]. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefTensor: Defining tensor DJ[-a]. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefTensor: Defining tensor DJ[-a]. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefTensor: Defining tensor DJ[-a]. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for G3.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor DpJ[-z]. 
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1} have been declared as DownValues for DVDB.
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
   Rules {1} have been declared as DownValues for DHDB.
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
   Rules {1} have been declared as DownValues for DJDB.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
   Rules {1} have been declared as DownValues for DJiDB.
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
   Rules {1} have been declared as DownValues for DLapseDB.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
   Rules {1} have been declared as UpValues for V.
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
   Rules {1} have been declared as UpValues for J.
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor DpJ[-z]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor TPerp[-a, -b]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor Q[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor Q[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor Q[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor Q[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor Q[-a, -b]. 
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DHComp[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefConstantSymbol: Defining constant symbol dummy. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= ** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 

In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= ** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67393720 bytes in RAM.

In[24]:= In[24]:=           ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67396048 bytes in RAM.

In[24]:= In[24]:=           ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67393792 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:=          
In[26]:=          
In[25]:= 
In[26]:= ** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
                  
In[25]:= 
In[26]:= 
In[27]:= 
In[27]:= 
In[27]:= ** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
   Rules {1, 2} have been declared as DownValues for T1.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PR3.
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T2[-i]. 
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda2[-i]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= ** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 

In[16]:= 
In[17]:= ** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 

In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:= ** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** ToBasicForm...
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor Rc[a, -b]. 
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor Rc[a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefConstantSymbol: Defining constant symbol cAlp4. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefTensor: Defining tensor R6[]. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp0. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefTensor: Defining tensor T2[-i]. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
   Rules {1, 2} have been declared as UpValues for V.
   Rules {1, 2} have been declared as UpValues for V.
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
 ** ToNewCanonical...
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor A[a, c, -d]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor S1[-a]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
 ** ToNewCanonical...
   Rules {1} have been declared as DownValues for DVDB.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1} have been declared as DownValues for DJDB.
 ** ToNewCanonical...
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as DownValues for DLapseDB.
 ** ToNewCanonical...
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
   Rules {1} have been declared as UpValues for PR3.
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
   Rules {1} have been declared as UpValues for PR4.
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
   Rules {1} have been declared as UpValues for PR6.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1, 2} have been declared as UpValues for X.
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DpJ[-z]. 
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor DpV[-z, -a]. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
Connecting to external linux executable...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67388992 bytes in RAM.

In[24]:= In[24]:=          ** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
                  
In[25]:= 
In[26]:= 
In[27]:= ** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67391968 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67392512 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
 ** ToNewCanonical...
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor DummyGradient[-z]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor Q[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
** DefTensor: Defining tensor S1[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S2[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S3[-a]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Connecting to external linux executable...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
 ** ToBasicForm...
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67390296 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** VarAction...
 ** VarAction...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
** DefTensor: Defining tensor PhiB0p[]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** ToNewCanonical...
 ** VarAction...
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** VarAction...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor ChiA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol sigma. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
 ** VarAction...
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor UB0p[]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** PoissonBracket: Finding barred derivatives...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor ChiSingB1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB0p[]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
** DefTensor: Defining tensor RP1m[-a]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor PiPA1m[-a]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
** DefTensor: Defining tensor TP1m[-a]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor RLambdaP1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor RPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RPerp0m[]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor ChiParaB0m[]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DpPiPA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DHComp[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DRP0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor KX[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67389704 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=    Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpHComp[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor JD[-a, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67390104 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= ** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 

In[27]:=  ** ToNewCanonical...
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** ToBasicForm...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 

** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67388120 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:=    Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.

In[27]:=  ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefConstantSymbol: Defining constant symbol dummy. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** VarAction...
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor S3[-a]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefConstantSymbol: Defining constant symbol dummy. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67387776 bytes in RAM.
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefConstantSymbol: Defining constant symbol dummy. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67391704 bytes in RAM.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67394384 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:= ** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67392920 bytes in RAM.

In[24]:= In[24]:=          ** DefTensor: Defining tensor DpHComp[-z]. 
                  
In[25]:= 
In[26]:= 
In[27]:= ** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67392736 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:= ** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67389256 bytes in RAM.

In[24]:= In[24]:=          ** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
                  
In[25]:= 
In[26]:= 
In[27]:= ** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 

In[24]:= 
In[24]:= In[24]:= In[24]:=                   ** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
                                    
In[25]:= 
In[25]:= 
In[26]:= 
In[26]:= 
In[27]:= 
In[27]:=  ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67389352 bytes in RAM.

In[24]:= In[24]:=          ** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
                  
In[25]:= 
In[26]:= ** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 

In[27]:=  ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S1[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor S2[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S3[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S1[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor S2[-a]. 
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}
** DefTensor: Defining tensor S3[-a]. 

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToBasicForm...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** ToNewCanonical...
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
 ** ToNewCanonical...
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67389264 bytes in RAM.
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67385760 bytes in RAM.
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67390968 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** VarAction...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx

In[24]:= In[24]:=           ** ToNewCanonical...
          ** ToBasicForm...
         
In[25]:= 
In[26]:= 
In[27]:=  ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...

In[24]:= In[24]:=           ** ToNewCanonical...
                  
In[25]:= 
In[26]:= 
In[27]:=  ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
Connecting to external linux executable...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`SymManipulator`  version 0.9.5, {2021, 9, 14}
CopyRight (C) 2011-2021, Thomas Bäckdahl, under the General Public License.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
------------------------------------------------------------
Package xAct`xTras`  version 1.4.2, {2014, 10, 30}
CopyRight (C) 2012-2014, Teake Nutma, under the General Public License.
** Variable $CovDFormat changed from Postfix to Prefix
** Option CurvatureRelations of DefCovD changed from False to True
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** ToNewCanonical...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** VarAction...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** VarAction...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** VarAction...

 ** VarAction...
BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...

In[22]:= 
In[22]:= 
In[23]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** VarAction...
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** VarAction...
 ** VarAction...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
 ** VarAction...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefVBundle: Defining vbundle TangentM4. 
 ** VarAction...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
 ** ToNewCanonical...
 ** VarAction...
** DefManifold: Defining manifold M4. 
 ** ToNewCanonical...
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
 ** VarAction...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefManifold: Defining manifold M4. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
 ** VarAction...
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
 ** VarAction...
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** VarAction...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** VarAction...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** VarAction...

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
 ** VarAction...
 ** ToNewCanonical...

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** VarAction...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...

PacletDataRebuild::lock: 
   Another process appears to be writing into the paclet repository at this
    time. Try PacletDataRebuild[] again.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol Prt. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol Prt. 
 ** VarAction...
 ** VarAction...

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
 ** VarAction...
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
 ** VarAction...
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor R5[-i, -j]. 
 ** VarAction...
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
 ** VarAction...
** DefTensor: Defining tensor T2[-i]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for T1.
 ** VarAction...
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
 ** VarAction...
** DefTensor: Defining tensor R4[-i, -j]. 
 ** VarAction...
** DefTensor: Defining tensor R5[-i, -j]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
 ** VarAction...
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
 ** VarAction...
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
 ** VarAction...
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda6[]. 
 ** VarAction...
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor TLambda2[-i]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
 ** VarAction...
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2} have been declared as DownValues for T1.
 ** VarAction...
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambda6[]. 
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
 ** VarAction...
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
 ** VarAction...
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PR4.
 ** VarAction...
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
 ** VarAction...
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor Spin2[-i]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
 ** VarAction...
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
 ** VarAction...
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor Rs[]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefTensor: Defining tensor Tc[-a]. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefTensor: Defining tensor Rs[]. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefTensor: Defining tensor Tc[-a]. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefTensor: Defining tensor V[-a]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
   Rules {1, 2} have been declared as UpValues for V.
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefTensor: Defining tensor Lapse[]. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefTensor: Defining tensor Ji[]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefTensor: Defining tensor J[]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
   Rules {1} have been declared as UpValues for J.
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol gBet3. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefTensor: Defining tensor V[-a]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
   Rules {1, 2} have been declared as UpValues for V.
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefTensor: Defining tensor Lapse[]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefTensor: Defining tensor Ji[]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefTensor: Defining tensor J[]. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
   Rules {1} have been declared as UpValues for J.
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor H[-a, c]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor B[a, -c]. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol Alp3. 
   Rules {1, 2} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
 ** PoissonBracket: Finding barred derivatives...
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
   Rules {1, 2} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor BPiP[-a, -c]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as DownValues for G3.
 ** VarAction...
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor FoliG[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor FoliG[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
 ** VarAction...
** DefTensor: Defining tensor HComp[]. 
 ** VarAction...
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as DownValues for DVDB.
 ** VarAction...
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as DownValues for DJDB.
 ** VarAction...
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as DownValues for DLapseDB.
 ** VarAction...
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as DownValues for DLapseDB.
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for J.
 ** VarAction...
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor X[k]. 
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for X.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpJ[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** VarAction...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** VarAction...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** VarAction...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** VarAction...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiB0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
 ** ToO3...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB0p[]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
 ** ToO3...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor TP0m[]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** CDBToDJDV...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** CDToD...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor RPerp0p[]. 
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining tensor RPerp0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
 ** VarAction...
 ** VarAction...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
The working directory is /home/wb263/HiGGS_development

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** VarAction...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** ToNewCanonical...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA0p[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** VarAction...
 ** VarAction...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
 ** VarAction...
 ** VarAction...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
 ** VarAction...
 ** VarAction...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
 ** VarAction...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
 ** ToNewCanonical...

In[22]:=  ** ToNewCanonical...

In[23]:=  ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** ToNewCanonical...
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
 ** ToNewCanonical...
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefManifold: Defining manifold M4. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** ToBasicForm...
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
 ** ToNewCanonical...
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefManifold: Defining manifold M4. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefVBundle: Defining vbundle TangentM4. 
 ** ToNewCanonical...
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
 ** ToO3...
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToNewCanonical...
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefCovD: Defining covariant derivative CD[-a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefVBundle: Defining vbundle TangentM4. 
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
 ** ToNewCanonical...
** DefManifold: Defining manifold M4. 
 ** ToNewCanonical...
** DefVBundle: Defining vbundle TangentM4. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
 ** ToNewCanonical...
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
** DefCovD: Defining covariant derivative CD[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Prt. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
** DefConstantSymbol: Defining constant symbol Prt. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...

 ** ToNewCanonical...
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...

 ** ToNewCanonical...
StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
 ** VarAction...
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
 ** ToNewCanonical...
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
 ** VarAction...
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor R5[-i, -j]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor T2[-i]. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Prt. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
 ** VarAction...
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor R6[]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.


Syntax::sntufn: Unknown unicode longname Application.
Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor R5[-i, -j]. 
 ** VarAction...
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
 ** VarAction...
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor T3[-i]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1, 2} have been declared as DownValues for T1.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R4[-i, -j]. 

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R5[-i, -j]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R6[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor T2[-i]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor R6[]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda2[-i]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor RLambda6[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2} have been declared as DownValues for T1.
 ** VarAction...
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1} have been declared as UpValues for PR6.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor R5[-i, -j]. 
   Rules {1} have been declared as UpValues for PT1.
** DefConstantSymbol: Defining constant symbol Prt. 
** DefTensor: Defining tensor R6[]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor T1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1} have been declared as UpValues for PT3.
   Rules {1, 2} have been declared as DownValues for R4.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1, 2} have been declared as DownValues for R4.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor T2[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor W[a, b, -d, -e]. 
   Rules {1, 2} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
 ** VarAction...
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
 ** VarAction...
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda6[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1} have been declared as UpValues for PR3.
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** VarAction...
 ** ToNewCanonical...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
 ** ToNewCanonical...
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
 ** ToNewCanonical...
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining weight +2 density DetG[]. Determinant.
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Prt. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
 ** VarAction...
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
 ** VarAction...
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
 ** VarAction...
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
 ** VarAction...
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
 ** VarAction...
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** ToNewCanonical...
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefTensor: Defining tensor Rs[]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefTensor: Defining tensor Tc[-a]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
 ** ToNewCanonical...
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefTensor: Defining tensor Lapse[]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefTensor: Defining tensor Ji[]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefTensor: Defining tensor J[]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for J.
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
   Rules {1} have been declared as UpValues for PR3.
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
   Rules {1} have been declared as UpValues for PR4.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
   Rules {1} have been declared as UpValues for PR6.
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
 ** ToBasicForm...
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefTensor: Defining tensor B[a, -c]. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor G3[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PR5.
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
   Rules {1} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
   Rules {1} have been declared as UpValues for PT1.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
   Rules {1} have been declared as UpValues for PR2.
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
   Rules {1} have been declared as UpValues for PR3.
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
   Rules {1} have been declared as UpValues for PR4.
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
   Rules {1} have been declared as UpValues for PR5.
 ** ToNewCanonical...
** DefTensor: Defining tensor HComp[]. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor Rc[a, -b]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1} have been declared as DownValues for DLapseDB.
 ** ToNewCanonical...
 ** VarAction...
   Rules {1} have been declared as UpValues for V.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefTensor: Defining tensor Rc[a, -b]. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
   Rules {1} have been declared as UpValues for Ji.
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefTensor: Defining tensor Rs[]. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefConstantSymbol: Defining constant symbol gBet6. 
   Rules {1} have been declared as DownValues for DJDB.
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
   Rules {1} have been declared as DownValues for DJiDB.
** DefConstantSymbol: Defining constant symbol Bet1. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
   Rules {1} have been declared as DownValues for DLapseDB.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
   Rules {1} have been declared as UpValues for V.
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol Bet2. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
   Rules {1} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor BPi[-a, -c]. 
   Rules {1} have been declared as UpValues for Ji.
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefConstantSymbol: Defining constant symbol gBet2. 
   Rules {1} have been declared as UpValues for Lapse.
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
   Rules {1, 2} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as UpValues for V.
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor Lapse[]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor HComp[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
 ** VarAction...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
   Rules {1} have been declared as DownValues for DJDB.
 ** VarAction...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DLapseDB.
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor TPerp[-a, -b]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for Ji.
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for Lapse.
 ** VarAction...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor X[k]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1, 2} have been declared as UpValues for X.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
   Rules {1, 2} have been declared as UpValues for X.
 ** VarAction...
** DefTensor: Defining tensor TPerp[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefTensor: Defining tensor DUB0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB0p[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DUA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor DV[-a, -j]. 
 ** VarAction...
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** VarAction...
** DefTensor: Defining tensor DUA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpV[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** VarAction...
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DpJ[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
 ** VarAction...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefTensor: Defining tensor RLambda6[]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor DTP1m[-z, -a]. 
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor RLambda6[]. 
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1} have been declared as UpValues for H.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1} have been declared as UpValues for J.
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
   Rules {1} have been declared as UpValues for Ji.
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
   Rules {1} have been declared as UpValues for Lapse.
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
 ** VarAction...
** DefTensor: Defining tensor Spin3[-i]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefTensor: Defining tensor X[k]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1, 2} have been declared as UpValues for V.
 ** VarAction...
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor Ji[]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
   Rules {1} have been declared as DownValues for DVDB.
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor BPi[-a, -c]. 
   Rules {1} have been declared as UpValues for PR3.
** DefTensor: Defining tensor BPiP[-a, -c]. 
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for H.
 ** VarAction...
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1} have been declared as UpValues for PR6.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for Lapse.
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for PT1.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
 ** VarAction...
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor TLambda2[-i]. 
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor Tc[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
 ** VarAction...
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
 ** VarAction...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefTensor: Defining tensor R5[-i, -j]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol gBet5. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor T2[-i]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefConstantSymbol: Defining constant symbol mBet6. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
 ** VarAction...
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DVDB.
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor Spin3[-i]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
 ** VarAction...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
   Rules {1, 2} have been declared as DownValues for R4.
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBet2. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefConstantSymbol: Defining constant symbol cBet3. 
   Rules {1} have been declared as DownValues for DJiDB.
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for V.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for T1.
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
 ** VarAction...
** DefTensor: Defining tensor H[-a, c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefTensor: Defining tensor B[a, -c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
   Rules {1, 2} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2} have been declared as DownValues for G3.
 ** VarAction...
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
   Rules {1} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for H.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor FoliG[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor A[a, c, -d]. 
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor RLambda5[-i, -j]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambda6[]. 
 ** VarAction...
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor TLambda2[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor DpJ[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** VarAction...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
 ** VarAction...
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
 ** VarAction...
** DefTensor: Defining tensor Rc[a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
 ** VarAction...
** DefTensor: Defining tensor Rs[]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor Tc[-a]. 
 ** VarAction...
** DefTensor: Defining tensor HComp[]. 
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor PPerp[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPara[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor DpJ[-z]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
 ** PoissonBracket: Finding barred derivatives...
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
   Rules {1} have been declared as DownValues for DVDB.
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
   Rules {1} have been declared as DownValues for DHDB.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
   Rules {1} have been declared as DownValues for DJiDB.
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor BPi[-a, -c]. 
 ** VarAction...
** DefTensor: Defining tensor BPiP[-a, -c]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for PR5.
 ** VarAction...
   Rules {1} have been declared as UpValues for Lapse.
   Rules {1} have been declared as UpValues for PR6.
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor G3[-a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for G3.
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor PA0m[d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
   Rules {1} have been declared as DownValues for DVDB.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
 ** ToNewCanonical...
   Rules {1} have been declared as DownValues for DJDB.
** DefConstantSymbol: Defining constant symbol Alp5. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Alp6. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol mBet1. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol mBet2. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol mBet3. 
 ** PoissonBracket: Finding kernel coefficients...
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1} have been declared as DownValues for DJiDB.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor APi[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DV[-a, -j]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for H.
 ** ToNewCanonical...
** DefTensor: Defining tensor BPi[-a, -c]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor BPiP[-a, -c]. 
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
   Rules {1} have been declared as UpValues for Ji.
 ** VarAction...
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for G3.
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor DpJ[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor X[k]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
   Rules {1, 2} have been declared as UpValues for X.
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor Q[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1} have been declared as DownValues for DJiDB.
 ** ToNewCanonical...
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
   Rules {1} have been declared as UpValues for H.
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor TPerp[-a, -b]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor DpJ[-z]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DpJ[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor DRP0p[-z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DpJ[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1m[-z, -a]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
{PhiB1p[-i, -j], PhiA1p[-l, -m]} ≈ 
 
     -2 Bet1 FoliG[-i, -m] FoliG[-j, -l]
>   {----------------------------------- + 
                     J[]
 
      2 Bet1 FoliG[-i, -l] FoliG[-j, -m]
>     ---------------------------------- - 
                     J[]
 
      FoliG[-i, -m] FoliG[-j, -l] PiPA0p[]
>     ------------------------------------ + 
                          2
                     6 J[]
 
      FoliG[-i, -l] FoliG[-j, -m] PiPA0p[]
>     ------------------------------------, 0, 0}
                          2
                     6 J[]
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
 ** ToO3...
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** VarAction...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
 ** CDToD...
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
 ** ToO3...
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** ToOrderCanonical: order Infinity...
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
 ** ToNewCanonical...
** DefTensor: Defining tensor PT0m[d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefTensor: Defining tensor DRP0p[-z]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor Q[-a, -b]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0p[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0m[-z]. 
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1p[-l, -m]} ≈ 
 
     -2 Bet1 FoliG[-i, -m] FoliG[-j, -l]
>   {----------------------------------- + 
                     J[]
 
      2 Bet1 FoliG[-i, -l] FoliG[-j, -m]
>     ---------------------------------- - 
                     J[]
 
      FoliG[-i, -m] FoliG[-j, -l] PiPA0p[]
>     ------------------------------------ + 
                          2
                     6 J[]
 
      FoliG[-i, -l] FoliG[-j, -m] PiPA0p[]
>     ------------------------------------, 0, 0}
                          2
                     6 J[]
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
{PhiB1p[-i, -j], PhiA1p[-l, -m]} ≈ 
 
     -2 Bet1 FoliG[-i, -m] FoliG[-j, -l]
>   {----------------------------------- + 
                     J[]
 
      2 Bet1 FoliG[-i, -l] FoliG[-j, -m]
>     ---------------------------------- - 
                     J[]
 
      FoliG[-i, -m] FoliG[-j, -l] PiPA0p[]
>     ------------------------------------ + 
                          2
                     6 J[]
 
      FoliG[-i, -l] FoliG[-j, -m] PiPA0p[]
>     ------------------------------------, 0, 0}
                          2
                     6 J[]
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1p[-l, -m]} ≈ 
 
     -2 Bet1 FoliG[-i, -m] FoliG[-j, -l]
>   {----------------------------------- + 
                     J[]
 
      2 Bet1 FoliG[-i, -l] FoliG[-j, -m]
>     ---------------------------------- - 
                     J[]
 
      FoliG[-i, -m] FoliG[-j, -l] PiPA0p[]
>     ------------------------------------ + 
                          2
                     6 J[]
 
      FoliG[-i, -l] FoliG[-j, -m] PiPA0p[]
>     ------------------------------------, 0, 0}
                          2
                     6 J[]
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRP2p.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1p[-l, -m]} ≈ 
 
     -2 Bet1 FoliG[-i, -m] FoliG[-j, -l]
>   {----------------------------------- + 
                     J[]
 
      2 Bet1 FoliG[-i, -l] FoliG[-j, -m]
>     ---------------------------------- - 
                     J[]
 
      FoliG[-i, -m] FoliG[-j, -l] PiPA0p[]
>     ------------------------------------ + 
                          2
                     6 J[]
 
      FoliG[-i, -l] FoliG[-j, -m] PiPA0p[]
>     ------------------------------------, 0, 0}
                          2
                     6 J[]
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
{PhiB1p[-i, -j], PhiA1p[-l, -m]} ≈ 
 
     -2 Bet1 FoliG[-i, -m] FoliG[-j, -l]
>   {----------------------------------- + 
                     J[]
 
      2 Bet1 FoliG[-i, -l] FoliG[-j, -m]
>     ---------------------------------- - 
                     J[]
 
      FoliG[-i, -m] FoliG[-j, -l] PiPA0p[]
>     ------------------------------------ + 
                          2
                     6 J[]
 
      FoliG[-i, -l] FoliG[-j, -m] PiPA0p[]
>     ------------------------------------, 0, 0}
                          2
                     6 J[]
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -(APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[]) - 
 
>    APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRP2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefTensor: Defining tensor PhiB0p[]. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefTensor: Defining tensor PhiA0p[]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
 ** ToBasicForm...
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -(APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[]) - 
 
>    APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l]}
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** ToNewCanonical...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -(APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[]) - 
 
>    APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -(APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[]) - 
 
>    APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l]}
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
{PhiB1p[-i, -j], PhiA1p[-l, -m]} ≈ 
 
     -2 Bet1 FoliG[-i, -m] FoliG[-j, -l]
>   {----------------------------------- + 
                     J[]
 
      2 Bet1 FoliG[-i, -l] FoliG[-j, -m]
>     ---------------------------------- - 
                     J[]
 
      FoliG[-i, -m] FoliG[-j, -l] PiPA0p[]
>     ------------------------------------ + 
                          2
                     6 J[]
 
      FoliG[-i, -l] FoliG[-j, -m] PiPA0p[]
>     ------------------------------------, 0, 0}
                          2
                     6 J[]
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToBasicForm...
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PB0p[c, d]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiB0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor PhiB0p[]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -(APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[]) - 
 
>    APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l]}
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToNewCanonical...
 ** VarAction...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -(APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[]) - 
 
>    APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l]}
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToO3...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining tensor DHComp[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** VarAction...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
 ** ToNewCanonical...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** VarAction...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -(APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[]) - 
 
>    APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l]}
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** ToNewCanonical...
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
 ** ToO3...
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
 ** VarAction...
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** CDToD...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
 ** CDToD...
** DefTensor: Defining tensor ChiB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
 ** VarAction...
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB0p[]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
 ** VarAction...
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** VarAction...
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
 ** ToO3...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
 ** VarAction...
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
 ** VarAction...
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor UB0p[]. 
 ** VarAction...
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
 ** ToOrderCanonical: order Infinity...
 ** VarAction...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** VarAction...
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
 ** VarAction...
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor PhiB0p[]. 
 ** VarAction...
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiB0p[]. 
 ** VarAction...
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** VarAction...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** VarAction...
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiA1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToO3...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1m[-l]} ≈ {0, 0, 0}
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** VarAction...
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** VarAction...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** ToO3...
 ** VarAction...
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** CDToD...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor TP0m[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingA0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA0m[]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** CollapseA...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiB1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
{PhiB1p[-i, -j], PhiA1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB0p[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0m[]. 
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** CDToD...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
** DefTensor: Defining tensor ChiB0p[]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor ChiB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** CDToD...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor RPerp0p[]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1m[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor ChiSingB0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB0p[]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** CDToD...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UA2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefTensor: Defining tensor PiPA0p[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor PiPA0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1])
>   ------------------------------------------------- - 
                            2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ---------------------------------------------- + 
                           2
 
     APi[-a, -b, b1] B[a, a1] G[-l, -m] G3[-a1, -b1] Ji[] V[b]
>    --------------------------------------------------------- - 
                                 3
 
     APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l] V[-m]
>    -----------------------------------------------------------}
                                  3
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
 ** VarAction...
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefTensor: Defining tensor ChiSingA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor RP0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor RP2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor TP0m[]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1])
>   ------------------------------------------------- - 
                            2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ---------------------------------------------- + 
                           2
 
     APi[-a, -b, b1] B[a, a1] G[-l, -m] G3[-a1, -b1] Ji[] V[b]
>    --------------------------------------------------------- - 
                                 3
 
     APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l] V[-m]
>    -----------------------------------------------------------}
                                  3
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor UB0p[]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
** DefTensor: Defining tensor UB2p[-a, -b]. 
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1])
>   ------------------------------------------------- - 
                            2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ---------------------------------------------- + 
                           2
 
     APi[-a, -b, b1] B[a, a1] G[-l, -m] G3[-a1, -b1] Ji[] V[b]
>    --------------------------------------------------------- - 
                                 3
 
     APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l] V[-m]
>    -----------------------------------------------------------}
                                  3
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor UA0m[]. 
 ** CDBToDJDV...
 ** ToO3...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
** DefTensor: Defining tensor UA1p[-a, -b]. 
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1])
>   ------------------------------------------------- - 
                            2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ---------------------------------------------- + 
                           2
 
     APi[-a, -b, b1] B[a, a1] G[-l, -m] G3[-a1, -b1] Ji[] V[b]
>    --------------------------------------------------------- - 
                                 3
 
     APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l] V[-m]
>    -----------------------------------------------------------}
                                  3
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1])
>   ------------------------------------------------- - 
                            2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ---------------------------------------------- + 
                           2
 
     APi[-a, -b, b1] B[a, a1] G[-l, -m] G3[-a1, -b1] Ji[] V[b]
>    --------------------------------------------------------- - 
                                 3
 
     APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l] V[-m]
>    -----------------------------------------------------------}
                                  3
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1])
>   ------------------------------------------------- - 
                            2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ---------------------------------------------- + 
                           2
 
     APi[-a, -b, b1] B[a, a1] G[-l, -m] G3[-a1, -b1] Ji[] V[b]
>    --------------------------------------------------------- - 
                                 3
 
     APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l] V[-m]
>    -----------------------------------------------------------}
                                  3
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA0p[]. 
 ** CDToD...
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** CDToD...
** DefTensor: Defining tensor UB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB2p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
 ** VarAction...
 ** VarAction...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor UB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor UA0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor UB0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor UB1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor UA1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1])
>   ------------------------------------------------- - 
                            2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ---------------------------------------------- + 
                           2
 
     APi[-a, -b, b1] B[a, a1] G[-l, -m] G3[-a1, -b1] Ji[] V[b]
>    --------------------------------------------------------- - 
                                 3
 
     APi[-a, -b, b1] B[a, a1] G3[-a1, -b1] Ji[] V[b] V[-l] V[-m]
>    -----------------------------------------------------------}
                                  3
 ** VarAction...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** VarAction...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** VarAction...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** VarAction...
** DefTensor: Defining tensor UB1m[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** VarAction...
** DefTensor: Defining tensor UA1m[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor UA2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** VarAction...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** VarAction...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor DPiPA0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** VarAction...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** VarAction...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** CDToD...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyGradient[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** VarAction...
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP0p[]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP0m[]. 
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** VarAction...
 ** ToBasicForm...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** CollapseA...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** VarAction...
** DefTensor: Defining tensor RP0p[]. 
 ** VarAction...
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor PiPA0p[]. 
 ** VarAction...
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor PiPA0p[]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** VarAction...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor DpHComp[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor JD[-a, -y, -z]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** CollapseA...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
 ** VarAction...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor S1[-a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor S2[-a]. 
 ** PoissonBracket: BasicForm to be evaluated is:
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor S3[-a]. 
 ** VarAction...
 ** CollapseA...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor TP0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** VarAction...
** DefTensor: Defining tensor RP0p[]. 
 ** VarAction...
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RP1m[-a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** VarAction...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RP2p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol dummy. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
** DefConstantSymbol: Defining constant symbol dummy. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor TPerp0p[]. 
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp0p[]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** VarAction...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S1[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67292768 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** VarAction...
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** VarAction...
** DefTensor: Defining tensor TPerp0p[]. 
 ** VarAction...
** DefTensor: Defining tensor S3[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67293192 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:= ** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 
 ** VarAction...

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor QD[-a, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp0p[]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp0p[]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor RPerp0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor TP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
** DefTensor: Defining tensor RP0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0m[]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2p[-l, -m]} ≈ {0, 0, 0}
** DefTensor: Defining tensor RP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1p[-l, -m]} ≈ {0, 0, 0}
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor S1[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor S2[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor S3[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** VarAction...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TP0m[]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67279800 bytes in RAM.

In[24]:= In[24]:=           ** VarAction...
                  
In[25]:= 
In[26]:= 
In[27]:=  ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
** DefTensor: Defining tensor TLambdaP0m[]. 
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RP2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67296416 bytes in RAM.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor TP1p[-a, -b]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor TPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
{PhiB1p[-i, -j], PhiA2p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
ssh_exchange_identification: Connection closed by remote host
 ** ToNewCanonical...
 ** ToNewCanonical...
lost connection
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
ssh_exchange_identification: Connection closed by remote host
 ** ToNewCanonical...
lost connection
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
ssh_exchange_identification: Connection closed by remote host
lost connection
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
ssh_exchange_identification: Connection closed by remote host
lost connection
ssh_exchange_identification: Connection closed by remote host
lost connection
** DefTensor: Defining tensor RP0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0m[]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** CDBToDJDV...
** DefTensor: Defining tensor RP1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
ssh_exchange_identification: Connection closed by remote host
 ** ToNewCanonical...
lost connection
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2p[-l, -m]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
ssh_exchange_identification: Connection closed by remote host
lost connection
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerp1m[-a]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor TLambdaP0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** VarAction...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** PoissonBracket: Finding barred derivatives...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP0m[]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
			(...replotting...)
 ** ToNewCanonical...
 ** ToNewCanonical...

(gnome-ssh-askpass:128277): Gtk-WARNING **: 12:26:00.910: cannot open display: localhost:108.0

(gnome-ssh-askpass:128269): Gtk-WARNING **: 12:26:00.908: cannot open display: localhost:108.0
 ** VarAction...
Permission denied, please try again.
Permission denied, please try again.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.

(gnome-ssh-askpass:128251): Gtk-WARNING **: 12:26:00.981: cannot open display: localhost:108.0

(gnome-ssh-askpass:128280): Gtk-WARNING **: 12:26:00.980: cannot open display: localhost:108.0

(gnome-ssh-askpass:128261): Gtk-WARNING **: 12:26:00.981: cannot open display: localhost:108.0

(gnome-ssh-askpass:128258): Gtk-WARNING **: 12:26:00.981: cannot open display: localhost:108.0

(gnome-ssh-askpass:128271): Gtk-WARNING **: 12:26:00.981: cannot open display: localhost:108.0

(gnome-ssh-askpass:128262): Gtk-WARNING **: 12:26:00.974: cannot open display: localhost:108.0

(gnome-ssh-askpass:128263): Gtk-WARNING **: 12:26:00.982: cannot open display: localhost:108.0

(gnome-ssh-askpass:128276): Gtk-WARNING **: 12:26:00.982: cannot open display: localhost:108.0

(gnome-ssh-askpass:128270): Gtk-WARNING **: 12:26:00.982: cannot open display: localhost:108.0

(gnome-ssh-askpass:128275): Gtk-WARNING **: 12:26:00.982: cannot open display: localhost:108.0

(gnome-ssh-askpass:128260): Gtk-WARNING **: 12:26:00.982: cannot open display: localhost:108.0

(gnome-ssh-askpass:128256): Gtk-WARNING **: 12:26:00.981: cannot open display: localhost:108.0

(gnome-ssh-askpass:128281): Gtk-WARNING **: 12:26:00.981: cannot open display: localhost:108.0
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.

(gnome-ssh-askpass:128257): Gtk-WARNING **: 12:26:00.982: cannot open display: localhost:108.0

(gnome-ssh-askpass:128255): Gtk-WARNING **: 12:26:00.990: cannot open display: localhost:108.0

(gnome-ssh-askpass:128273): Gtk-WARNING **: 12:26:00.983: cannot open display: localhost:108.0
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
 ** VarAction...

(gnome-ssh-askpass:128278): Gtk-WARNING **: 12:26:01.011: cannot open display: localhost:108.0

(gnome-ssh-askpass:128279): Gtk-WARNING **: 12:26:01.020: cannot open display: localhost:108.0

(gnome-ssh-askpass:128253): Gtk-WARNING **: 12:26:00.997: cannot open display: localhost:108.0

(gnome-ssh-askpass:128254): Gtk-WARNING **: 12:26:01.015: cannot open display: localhost:108.0

(gnome-ssh-askpass:128272): Gtk-WARNING **: 12:26:01.022: cannot open display: localhost:108.0

(gnome-ssh-askpass:128267): Gtk-WARNING **: 12:26:01.015: cannot open display: localhost:108.0
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
			(...replotting...)
Permission denied, please try again.

(gnome-ssh-askpass:128274): Gtk-WARNING **: 12:26:01.035: cannot open display: localhost:108.0
Permission denied, please try again.
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp0p[]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
			(...replotting...)
			(...replotting...)
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0m[-z]. 
			(...replotting...)
			(...replotting...)
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
			(...replotting...)
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

 ** ToNewCanonical...
FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** ToNewCanonical...
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
 ** ToNewCanonical...
------------------------------------------------------------
 ** VarAction...
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** VarAction...
The working directory is /home/wb263/HiGGS_development
 ** VarAction...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -n, a1] B[-l, a] G3[-a, -a1] Ji[])
>   -------------------------------------------- + 
                         4
 
     APi[-l, -n, a1] B[-m, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         4
 
     APi[-l, -m, a1] B[-n, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         2
 
     3 APi[-m, -a, b] B[a, a1] G[-l, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- - 
                              8
 
     3 APi[-l, -a, b] B[a, a1] G[-m, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- + 
                              8
 
     APi[-n, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- + 
                              4
 
     APi[-m, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- - 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-m, -n] G3[-a1, -b1] Ji[] V[b] V[-l]
>    ----------------------------------------------------------------- - 
                                     8
 
     APi[-n, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- + 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-l, -n] G3[-a1, -b1] Ji[] V[b] V[-m]
>    ----------------------------------------------------------------- + 
                                     8
 
     APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     3 APi[-m, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-l] V[-n]
>    ------------------------------------------------------ + 
                               8
 
     3 APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-m] V[-n]
>    ------------------------------------------------------}
                               8
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** VarAction...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** VarAction...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** VarAction...
 ** VarAction...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
** DefTensor: Defining tensor RPerp1m[-a]. 
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** VarAction...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

(gnome-ssh-askpass:128309): Gtk-WARNING **: 12:26:04.664: cannot open display: localhost:108.0

(gnome-ssh-askpass:128310): Gtk-WARNING **: 12:26:04.664: cannot open display: localhost:108.0

(gnome-ssh-askpass:128306): Gtk-WARNING **: 12:26:04.664: cannot open display: localhost:108.0

(gnome-ssh-askpass:128316): Gtk-WARNING **: 12:26:04.664: cannot open display: localhost:108.0

(gnome-ssh-askpass:128314): Gtk-WARNING **: 12:26:04.674: cannot open display: localhost:108.0

(gnome-ssh-askpass:128317): Gtk-WARNING **: 12:26:04.673: cannot open display: localhost:108.0

(gnome-ssh-askpass:128313): Gtk-WARNING **: 12:26:04.674: cannot open display: localhost:108.0

(gnome-ssh-askpass:128312): Gtk-WARNING **: 12:26:04.674: cannot open display: localhost:108.0

(gnome-ssh-askpass:128323): Gtk-WARNING **: 12:26:04.675: cannot open display: localhost:108.0

(gnome-ssh-askpass:128318): Gtk-WARNING **: 12:26:04.675: cannot open display: localhost:108.0

(gnome-ssh-askpass:128320): Gtk-WARNING **: 12:26:04.675: cannot open display: localhost:108.0
 ** VarAction...
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.

(gnome-ssh-askpass:128328): Gtk-WARNING **: 12:26:04.703: cannot open display: localhost:108.0

(gnome-ssh-askpass:128305): Gtk-WARNING **: 12:26:04.707: cannot open display: localhost:108.0
Permission denied, please try again.
Permission denied, please try again.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** VarAction...

(gnome-ssh-askpass:128327): Gtk-WARNING **: 12:26:04.715: cannot open display: localhost:108.0

(gnome-ssh-askpass:128322): Gtk-WARNING **: 12:26:04.718: cannot open display: localhost:108.0

(gnome-ssh-askpass:128321): Gtk-WARNING **: 12:26:04.718: cannot open display: localhost:108.0
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
 ** VarAction...

(gnome-ssh-askpass:128308): Gtk-WARNING **: 12:26:04.753: cannot open display: localhost:108.0
 ** VarAction...

(gnome-ssh-askpass:128311): Gtk-WARNING **: 12:26:04.758: cannot open display: localhost:108.0

(gnome-ssh-askpass:128324): Gtk-WARNING **: 12:26:04.744: cannot open display: localhost:108.0
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
 ** VarAction...

(gnome-ssh-askpass:128304): Gtk-WARNING **: 12:26:04.768: cannot open display: localhost:108.0

(gnome-ssh-askpass:128307): Gtk-WARNING **: 12:26:04.768: cannot open display: localhost:108.0

(gnome-ssh-askpass:128319): Gtk-WARNING **: 12:26:04.772: cannot open display: localhost:108.0

(gnome-ssh-askpass:128315): Gtk-WARNING **: 12:26:04.785: cannot open display: localhost:108.0
Permission denied, please try again.
Permission denied, please try again.

(gnome-ssh-askpass:128303): Gtk-WARNING **: 12:26:04.785: cannot open display: localhost:108.0
Permission denied, please try again.
 ** VarAction...
Permission denied, please try again.
 ** VarAction...
 ** VarAction...
Permission denied, please try again.

(gnome-ssh-askpass:128325): Gtk-WARNING **: 12:26:04.787: cannot open display: localhost:108.0
Permission denied, please try again.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefVBundle: Defining vbundle TangentM4. 

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
 ** ToNewCanonical...
** DefManifold: Defining manifold M4. 
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefVBundle: Defining vbundle TangentM4. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefManifold: Defining manifold M4. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
 ** ToNewCanonical...
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
** DefConstantSymbol: Defining constant symbol Prt. 
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefConstantSymbol: Defining constant symbol Prt. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** VarAction...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
 ** VarAction...
** DefTensor: Defining tensor DPiPB0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** VarAction...
** DefTensor: Defining tensor TPerp0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
** DefTensor: Defining tensor DPiPB0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
 ** VarAction...
** DefTensor: Defining tensor DPiPA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA0m[-z]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -n, a1] B[-l, a] G3[-a, -a1] Ji[])
>   -------------------------------------------- + 
                         4
 
     APi[-l, -n, a1] B[-m, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         4
 
     APi[-l, -m, a1] B[-n, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         2
 
     3 APi[-m, -a, b] B[a, a1] G[-l, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- - 
                              8
 
     3 APi[-l, -a, b] B[a, a1] G[-m, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- + 
                              8
 
     APi[-n, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- + 
                              4
 
     APi[-m, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- - 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-m, -n] G3[-a1, -b1] Ji[] V[b] V[-l]
>    ----------------------------------------------------------------- - 
                                     8
 
     APi[-n, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- + 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-l, -n] G3[-a1, -b1] Ji[] V[b] V[-m]
>    ----------------------------------------------------------------- + 
                                     8
 
     APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     3 APi[-m, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-l] V[-n]
>    ------------------------------------------------------ + 
                               8
 
     3 APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-m] V[-n]
>    ------------------------------------------------------}
                               8
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -n, a1] B[-l, a] G3[-a, -a1] Ji[])
>   -------------------------------------------- + 
                         4
 
     APi[-l, -n, a1] B[-m, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         4
 
     APi[-l, -m, a1] B[-n, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         2
 
     3 APi[-m, -a, b] B[a, a1] G[-l, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- - 
                              8
 
     3 APi[-l, -a, b] B[a, a1] G[-m, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- + 
                              8
 
     APi[-n, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- + 
                              4
 
     APi[-m, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- - 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-m, -n] G3[-a1, -b1] Ji[] V[b] V[-l]
>    ----------------------------------------------------------------- - 
                                     8
 
     APi[-n, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- + 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-l, -n] G3[-a1, -b1] Ji[] V[b] V[-m]
>    ----------------------------------------------------------------- + 
                                     8
 
     APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     3 APi[-m, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-l] V[-n]
>    ------------------------------------------------------ + 
                               8
 
     3 APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-m] V[-n]
>    ------------------------------------------------------}
                               8
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -n, a1] B[-l, a] G3[-a, -a1] Ji[])
>   -------------------------------------------- + 
                         4
 
     APi[-l, -n, a1] B[-m, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         4
 
     APi[-l, -m, a1] B[-n, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         2
 
     3 APi[-m, -a, b] B[a, a1] G[-l, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- - 
                              8
 
     3 APi[-l, -a, b] B[a, a1] G[-m, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- + 
                              8
 
     APi[-n, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- + 
                              4
 
     APi[-m, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- - 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-m, -n] G3[-a1, -b1] Ji[] V[b] V[-l]
>    ----------------------------------------------------------------- - 
                                     8
 
     APi[-n, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- + 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-l, -n] G3[-a1, -b1] Ji[] V[b] V[-m]
>    ----------------------------------------------------------------- + 
                                     8
 
     APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     3 APi[-m, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-l] V[-n]
>    ------------------------------------------------------ + 
                               8
 
     3 APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-m] V[-n]
>    ------------------------------------------------------}
                               8
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -n, a1] B[-l, a] G3[-a, -a1] Ji[])
>   -------------------------------------------- + 
                         4
 
     APi[-l, -n, a1] B[-m, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         4
 
     APi[-l, -m, a1] B[-n, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         2
 
     3 APi[-m, -a, b] B[a, a1] G[-l, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- - 
                              8
 
     3 APi[-l, -a, b] B[a, a1] G[-m, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- + 
                              8
 
     APi[-n, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- + 
                              4
 
     APi[-m, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- - 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-m, -n] G3[-a1, -b1] Ji[] V[b] V[-l]
>    ----------------------------------------------------------------- - 
                                     8
 
     APi[-n, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- + 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-l, -n] G3[-a1, -b1] Ji[] V[b] V[-m]
>    ----------------------------------------------------------------- + 
                                     8
 
     APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     3 APi[-m, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-l] V[-n]
>    ------------------------------------------------------ + 
                               8
 
     3 APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-m] V[-n]
>    ------------------------------------------------------}
                               8
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -n, a1] B[-l, a] G3[-a, -a1] Ji[])
>   -------------------------------------------- + 
                         4
 
     APi[-l, -n, a1] B[-m, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         4
 
     APi[-l, -m, a1] B[-n, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         2
 
     3 APi[-m, -a, b] B[a, a1] G[-l, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- - 
                              8
 
     3 APi[-l, -a, b] B[a, a1] G[-m, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- + 
                              8
 
     APi[-n, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- + 
                              4
 
     APi[-m, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- - 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-m, -n] G3[-a1, -b1] Ji[] V[b] V[-l]
>    ----------------------------------------------------------------- - 
                                     8
 
     APi[-n, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- + 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-l, -n] G3[-a1, -b1] Ji[] V[b] V[-m]
>    ----------------------------------------------------------------- + 
                                     8
 
     APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     3 APi[-m, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-l] V[-n]
>    ------------------------------------------------------ + 
                               8
 
     3 APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-m] V[-n]
>    ------------------------------------------------------}
                               8
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    -(APi[-m, -n, a1] B[-l, a] G3[-a, -a1] Ji[])
>   -------------------------------------------- + 
                         4
 
     APi[-l, -n, a1] B[-m, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         4
 
     APi[-l, -m, a1] B[-n, a] G3[-a, -a1] Ji[]
>    ----------------------------------------- + 
                         2
 
     3 APi[-m, -a, b] B[a, a1] G[-l, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- - 
                              8
 
     3 APi[-l, -a, b] B[a, a1] G[-m, -n] G3[-a1, -b] Ji[]
>    ---------------------------------------------------- + 
                              8
 
     APi[-n, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- + 
                              4
 
     APi[-m, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-l]
>    ---------------------------------------------------- - 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-m, -n] G3[-a1, -b1] Ji[] V[b] V[-l]
>    ----------------------------------------------------------------- - 
                                     8
 
     APi[-n, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-n, a] G3[-a, -b] Ji[] V[a1] V[-m]
>    ---------------------------------------------------- + 
                              2
 
     3 APi[-a, -b, b1] B[a, a1] G[-l, -n] G3[-a1, -b1] Ji[] V[b] V[-m]
>    ----------------------------------------------------------------- + 
                                     8
 
     APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1] V[-n]
>    ---------------------------------------------------- - 
                              4
 
     3 APi[-m, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-l] V[-n]
>    ------------------------------------------------------ + 
                               8
 
     3 APi[-l, -a, b] B[a, a1] G3[-a1, -b] Ji[] V[-m] V[-n]
>    ------------------------------------------------------}
                               8
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 

(gnome-ssh-askpass:128347): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128344): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128352): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128336): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128355): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128338): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128339): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128346): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128340): Gtk-WARNING **: 12:26:11.216: cannot open display: localhost:108.0

(gnome-ssh-askpass:128356): Gtk-WARNING **: 12:26:11.222: cannot open display: localhost:108.0
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection
lost connection
lost connection
lost connection
lost connection
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection
lost connection
Permission denied (publickey,password).
lost connection
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.

(gnome-ssh-askpass:128348): Gtk-WARNING **: 12:26:11.237: cannot open display: localhost:108.0
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.

(gnome-ssh-askpass:128345): Gtk-WARNING **: 12:26:11.281: cannot open display: localhost:108.0

(gnome-ssh-askpass:128359): Gtk-WARNING **: 12:26:11.281: cannot open display: localhost:108.0

(gnome-ssh-askpass:128341): Gtk-WARNING **: 12:26:11.284: cannot open display: localhost:108.0

(gnome-ssh-askpass:128343): Gtk-WARNING **: 12:26:11.284: cannot open display: localhost:108.0

(gnome-ssh-askpass:128342): Gtk-WARNING **: 12:26:11.284: cannot open display: localhost:108.0

(gnome-ssh-askpass:128337): Gtk-WARNING **: 12:26:11.285: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
Permission denied (publickey,password).
lost connection
lost connection
lost connection
lost connection
lost connection

(gnome-ssh-askpass:128351): Gtk-WARNING **: 12:26:11.295: cannot open display: localhost:108.0
   Rules {1, 2} have been declared as DownValues for DPiPA2p.

(gnome-ssh-askpass:128349): Gtk-WARNING **: 12:26:11.293: cannot open display: localhost:108.0
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:128350): Gtk-WARNING **: 12:26:11.295: cannot open display: localhost:108.0

(gnome-ssh-askpass:128358): Gtk-WARNING **: 12:26:11.308: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection

(gnome-ssh-askpass:128360): Gtk-WARNING **: 12:26:11.306: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection
** DefTensor: Defining tensor DpHComp[-z]. 

(gnome-ssh-askpass:128354): Gtk-WARNING **: 12:26:11.343: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:128353): Gtk-WARNING **: 12:26:11.341: cannot open display: localhost:108.0
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
Permission denied (publickey,password).
lost connection
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 

(gnome-ssh-askpass:128357): Gtk-WARNING **: 12:26:11.363: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor R4[-i, -j]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor T3[-i]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor RLambda4[-i, -j]. 
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor TLambda2[-i]. 
   Rules {1} have been declared as UpValues for PT1.
** DefTensor: Defining tensor TLambda3[-i]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
 ** VarAction...
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor Spin3[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
 ** VarAction...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefTensor: Defining tensor T2[-i]. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefTensor: Defining tensor T3[-i]. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
   Rules {1, 2} have been declared as DownValues for R4.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor H[-a, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor B[a, -c]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
   Rules {1, 2} have been declared as UpValues for H.
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
   Rules {1} have been declared as UpValues for G3.
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefTensor: Defining tensor RLambda6[]. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor TLambda3[-i]. 
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor ChiParaA0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor Spin3[-i]. 
 ** VarAction...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** VarAction...
   Rules {1} have been declared as DownValues for DJDB.
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
   Rules {1} have been declared as UpValues for PR1.
 ** VarAction...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
   Rules {1} have been declared as UpValues for PR4.
** DefTensor: Defining tensor DUB1m[-z, -a]. 
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1} have been declared as UpValues for PT1.
   Rules {1} have been declared as UpValues for PT2.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
   Rules {1} have been declared as DownValues for DVDB.
 ** VarAction...
   Rules {1} have been declared as DownValues for DHDB.
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor W[a, b, -d, -e]. 
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
   Rules {1} have been declared as UpValues for V.
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
 ** VarAction...
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor R4[-i, -j]. 
 ** VarAction...
** DefTensor: Defining tensor R5[-i, -j]. 
 ** VarAction...
** DefTensor: Defining tensor R6[]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as DownValues for T1.
 ** VarAction...
   Rules {1, 2} have been declared as UpValues for X.
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
 ** VarAction...
** DefTensor: Defining tensor H[-a, c]. 
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambda4.
** DefTensor: Defining tensor DUB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
 ** VarAction...
** DefTensor: Defining tensor TPerp[-a, -b]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for G3.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
   Rules {1} have been declared as UpValues for PR1.
** DefTensor: Defining tensor DummyGradient[-z]. 
   Rules {1} have been declared as UpValues for PR2.
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
   Rules {1} have been declared as UpValues for PR3.
   Rules {1} have been declared as UpValues for PR4.
   Rules {1} have been declared as UpValues for PR5.
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
 ** VarAction...
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1} have been declared as UpValues for PT1.
 ** VarAction...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor HComp[]. 
 ** VarAction...
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
 ** VarAction...
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DV[-a, -j]. 
 ** VarAction...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor DJ[-a]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DVDB.
 ** VarAction...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DHDB.
 ** VarAction...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DJDB.
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
   Rules {1} have been declared as DownValues for DLapseDB.
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
   Rules {1} have been declared as UpValues for V.
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
   Rules {1} have been declared as UpValues for H.
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
   Rules {1} have been declared as UpValues for Ji.
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor X[k]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor DJ[-a]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
 ** VarAction...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor APi[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor G3[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** VarAction...
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** VarAction...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
 ** VarAction...
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1m[-a]. 
   Rules {1} have been declared as DownValues for DLapseDB.
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
   Rules {1} have been declared as UpValues for V.
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
   Rules {1, 2} have been declared as UpValues for X.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol dummy. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** VarAction...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** VarAction...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
 ** VarAction...
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
   Rules {1, 2} have been declared as DownValues for DUA2p.
			(...replotting...)
** DefTensor: Defining tensor DpUB0p[-z]. 
			(...replotting...)
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** VarAction...
			(...replotting...)
 ** VarAction...
			(...replotting...)
			(...replotting...)
			(...replotting...)
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
			(...replotting...)
 ** VarAction...
			(...replotting...)
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
** DefTensor: Defining tensor DpV[-z, -a]. 
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor Q[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB0p[-z]. 
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
Package xAct`HiGGS`  version 2.2.1, {2022, 2, 1}
CopyRight (C) 2005-2018, Will E. V. Barker, under the General Public License.
------------------------------------------------------------
This free version of HiGGS is an open source dependent of the xAct bundle,\
 
>   but NOT an official part thereof.
This free version of HiGGS incorporates Cyril Pitrou's code from the public\
 
>   repository at https://github.com/xAct-contrib/examples.
------------------------------------------------------------

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
The working directory is /home/wb263/HiGGS_development
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor Q[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67453728 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=    Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
At least one HiGGS installation directory was found at ./xAct/HiGGS.
------------------------------------------------------------
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor Q[-a, -b]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor PA0p[c, d]. 

In[22]:= 
In[23]:= ** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
 ** BuildHiGGS: RAM used by kernel 0 is 
 
>   Dynamic[Refresh[MemoryInUse[], UpdateInterval -> 1]] bytes.
 ** BuildHiGGS: Building session from ./xAct/HiGGS/HiGGS_sources.nb
 
>    with active CellTags {build}.
 ** ToNewCanonical...
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 

FrontEndObject::notavail: 
   A front end is not available; certain operations require a front end.

General::stop: Further output of FrontEndObject::notavail
     will be suppressed during this calculation.
** DefManifold: Defining manifold M4. 
** DefVBundle: Defining vbundle TangentM4. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining symmetric metric tensor G[-a, -c]. 
** DefTensor: Defining antisymmetric tensor epsilonG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG[-a, -a1, -b, -b1]. 
** DefTensor: Defining tetrametric TetraG†[-a, -a1, -b, -b1]. 
** DefCovD: Defining covariant derivative CD[-a]. 
** DefTensor: Defining vanishing torsion tensor TorsionCD[a, -a1, -b]. 
** DefTensor: Defining symmetric Christoffel tensor ChristoffelCD[a, -a1, -b]
 
>   . 
** DefTensor: Defining vanishing Riemann tensor RiemannCD[-a, -a1, -b, -b1]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining vanishing Ricci tensor RicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Ricci scalar RicciScalarCD[]. 
** DefTensor: Defining vanishing Einstein tensor EinsteinCD[-a, -a1]. 
** DefTensor: Defining vanishing Weyl tensor WeylCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining vanishing TFRicci tensor TFRicciCD[-a, -a1]. 
** DefTensor: Defining vanishing Kretschmann scalar KretschmannCD[]. 
** DefTensor: Defining vanishing symmetrized Riemann tensor 
 
>   SymRiemannCD[-a, -a1, -b, -b1]. 
** DefTensor: Defining vanishing symmetric Schouten tensor SchoutenCD[-a, -a1]
 
>   . 
** DefTensor: Defining symmetric cosmological Schouten tensor 
 
>   SchoutenCCCD[LI[_], -a, -a1]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining symmetric cosmological Einstein tensor 
 
>   EinsteinCCCD[LI[_], -a, -a1]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining weight +2 density DetG[]. Determinant.
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
 ** VarAction...

StringJoin::string: 
   String expected at position 2 in 
    rm -rf <>FileNameJoin[{$Failed, figures/*}].
 ** VarAction...
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA0p[-z]. 
** DefConstantSymbol: Defining constant symbol Prt. 
 ** VarAction...
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.

Syntax::sntufn: Unknown unicode longname Application.
** DefTensor: Defining tensor R[a, b, -d, -e]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor T[a, -b, -c]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor W[a, b, -d, -e]. 
** DefTensor: Defining tensor PA0p[c, d]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
** DefTensor: Defining tensor RLambda[a, b, -d, -e]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor TLambda[a, -d, -e]. 
** DefTensor: Defining tensor R1[-i, -j, -m, -n]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor R2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor R4[-i, -j]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor R5[-i, -j]. 
** DefTensor: Defining tensor R6[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor T1[-i, -j, -k]. 
** DefTensor: Defining tensor T2[-i]. 
** DefTensor: Defining tensor T3[-i]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R1.
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   R1.
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for R2.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2} have been declared as DownValues for R4.
   Rules {1, 2, 3, 4} have been declared as DownValues for T1.
   Rules {1, 2} have been declared as DownValues for T1.
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambda1[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor RLambda2[-i, -j, -m, -n]. 
** DefTensor: Defining tensor RLambda3[-i, -j, -m, -n]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambda4[-i, -j]. 
** DefTensor: Defining tensor RLambda5[-i, -j]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambda6[]. 
** DefTensor: Defining tensor TLambda1[-i, -j, -k]. 
** DefTensor: Defining tensor TLambda2[-i]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor TLambda3[-i]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda1.
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} have been declared as DownValues for 
 
>   RLambda1.
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<4>>}
 
>    have been declared as DownValues for RLambda2.
   Rules {1, 2} have been declared as DownValues for RLambda4.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambda1.
   Rules {1, 2} have been declared as DownValues for TLambda1.
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor Spin1[-i, -j, -k]. 
** DefTensor: Defining tensor Spin2[-i]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor Spin3[-i]. 
** DefTensor: Defining tensor DRP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for Spin1.
** DefTensor: Defining tensor STensor[-i, -j, -k]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor PR1[-a, -b, -c, -d, e, f, g, h]. 
** DefTensor: Defining tensor PR2[-a, -b, -c, -d, e, f, g, h]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PR3[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR4[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR5[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PR6[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1} have been declared as UpValues for PR1.
   Rules {1} have been declared as UpValues for PR2.
   Rules {1} have been declared as UpValues for PR3.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1} have been declared as UpValues for PR4.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1} have been declared as UpValues for PR5.
   Rules {1} have been declared as UpValues for PR6.
** DefTensor: Defining tensor PW[-i, -k, -l, -m, a, b, c, d]. 
** DefTensor: Defining tensor PT1[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT2[-a, -b, -c, e, f, g]. 
** DefTensor: Defining tensor PT3[-a, -b, -c, e, f, g]. 
 ** VarAction...
   Rules {1} have been declared as UpValues for PT1.
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1} have been declared as UpValues for PT2.
   Rules {1} have been declared as UpValues for PT3.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/O13ProjectionsToggle.mx...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
 ** BuildHiGGS: The unit test labelled CheckOrthogonalityToggle has been\
 
>   ignored.
** DefTensor: Defining tensor Rc[a, -b]. 
** DefTensor: Defining tensor Rs[]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor Tc[-a]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
 ** BuildHiGGS: The unit test labelled ShowIrrepsToggle has been ignored.
** DefConstantSymbol: Defining constant symbol cAlp1. 
** DefConstantSymbol: Defining constant symbol cAlp2. 
** DefConstantSymbol: Defining constant symbol cAlp3. 
** DefConstantSymbol: Defining constant symbol cAlp4. 
** DefConstantSymbol: Defining constant symbol cAlp5. 
** DefConstantSymbol: Defining constant symbol cAlp6. 
** DefConstantSymbol: Defining constant symbol gAlp1. 
** DefConstantSymbol: Defining constant symbol gAlp2. 
** DefConstantSymbol: Defining constant symbol gAlp3. 
** DefConstantSymbol: Defining constant symbol gAlp4. 
** DefConstantSymbol: Defining constant symbol gAlp5. 
** DefConstantSymbol: Defining constant symbol gAlp6. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0p. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cAlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol cAlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol cBet1. 
** DefConstantSymbol: Defining constant symbol cBet2. 
** DefConstantSymbol: Defining constant symbol cBet3. 
** DefConstantSymbol: Defining constant symbol cBet4. 
** DefConstantSymbol: Defining constant symbol cBet5. 
** DefConstantSymbol: Defining constant symbol cBet6. 
** DefConstantSymbol: Defining constant symbol gBet1. 
** DefConstantSymbol: Defining constant symbol gBet2. 
** DefConstantSymbol: Defining constant symbol gBet3. 
** DefConstantSymbol: Defining constant symbol gBet4. 
** DefConstantSymbol: Defining constant symbol gBet5. 
** DefConstantSymbol: Defining constant symbol gBet6. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2p. 
** DefConstantSymbol: Defining constant symbol cBetParaPara2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol cBetPerpPara2m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol cBetParaPerp2p. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefConstantSymbol: Defining constant symbol cBetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol mAlp0. 
** DefConstantSymbol: Defining constant symbol mAlp1. 
** DefConstantSymbol: Defining constant symbol mAlp2. 
** DefConstantSymbol: Defining constant symbol mAlp3. 
** DefConstantSymbol: Defining constant symbol mAlp4. 
** DefConstantSymbol: Defining constant symbol mAlp5. 
** DefConstantSymbol: Defining constant symbol mAlp6. 
** DefConstantSymbol: Defining constant symbol Alp0. 
** DefConstantSymbol: Defining constant symbol Alp1. 
** DefConstantSymbol: Defining constant symbol Alp2. 
** DefConstantSymbol: Defining constant symbol Alp3. 
** DefConstantSymbol: Defining constant symbol Alp4. 
** DefConstantSymbol: Defining constant symbol Alp5. 
** DefConstantSymbol: Defining constant symbol Alp6. 
** DefConstantSymbol: Defining constant symbol mBet1. 
** DefConstantSymbol: Defining constant symbol mBet2. 
** DefConstantSymbol: Defining constant symbol mBet3. 
** DefConstantSymbol: Defining constant symbol mBet4. 
** DefConstantSymbol: Defining constant symbol mBet5. 
** DefConstantSymbol: Defining constant symbol mBet6. 
** DefConstantSymbol: Defining constant symbol Bet1. 
** DefConstantSymbol: Defining constant symbol Bet2. 
** DefConstantSymbol: Defining constant symbol Bet3. 
** DefConstantSymbol: Defining constant symbol Bet4. 
** DefConstantSymbol: Defining constant symbol Bet5. 
** DefConstantSymbol: Defining constant symbol Bet6. 
 ** VarAction...
** DefTensor: Defining tensor V[-a]. 
   Rules {1, 2} have been declared as UpValues for V.
** DefTensor: Defining tensor Lapse[]. 
** DefTensor: Defining tensor Ji[]. 
** DefTensor: Defining tensor J[]. 
   Rules {1} have been declared as UpValues for J.
** DefTensor: Defining tensor APi[-a, -b, -c]. 
** DefTensor: Defining tensor APiP[-a, -b, -c]. 
** DefTensor: Defining tensor BPi[-a, -c]. 
** DefTensor: Defining tensor BPiP[-a, -c]. 
** DefTensor: Defining tensor H[-a, c]. 
** DefTensor: Defining tensor B[a, -c]. 
   Rules {1, 2} have been declared as UpValues for H.
   Rules {1, 2} have been declared as UpValues for H.
** DefTensor: Defining tensor A[a, c, -d]. 
** DefTensor: Defining tensor G3[-a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1, 2} have been declared as DownValues for G3.
   Rules {1, 2, 3, 4, 5, 6, 7, 8} have been declared as UpValues for G3.
   Rules {1} have been declared as UpValues for G3.
** DefTensor: Defining tensor Eps[-a, -b, -c]. 
** DefTensor: Defining tensor FoliG[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor HComp[]. 
** DefTensor: Defining tensor PPerp[-a, -b]. 
** DefTensor: Defining tensor PPara[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DVDB[-a, -b, c]. 
** DefTensor: Defining tensor DHDB[-a, b, -c, d]. 
 ** VarAction...
** DefTensor: Defining tensor DJDB[-c, d]. 
** DefTensor: Defining tensor DJiDB[-c, d]. 
** DefTensor: Defining tensor DLapseDB[-c, d]. 
   Rules {1} have been declared as DownValues for DVDB.
   Rules {1} have been declared as DownValues for DHDB.
 ** VarAction...
   Rules {1} have been declared as DownValues for DJDB.
   Rules {1} have been declared as DownValues for DJiDB.
   Rules {1} have been declared as DownValues for DLapseDB.
   Rules {1} have been declared as UpValues for V.
 ** VarAction...
 ** VarAction...
   Rules {1} have been declared as UpValues for H.
   Rules {1} have been declared as UpValues for J.
 ** VarAction...
   Rules {1} have been declared as UpValues for Ji.
   Rules {1} have been declared as UpValues for Lapse.
 ** VarAction...
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor X[k]. 
   Rules {1, 2} have been declared as UpValues for X.
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TP[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DTP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DUA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
 ** VarAction...
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PPerpT0p[e, f]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaB1p. 
 ** VarAction...
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
** DefTensor: Defining tensor PhiB1m[-a]. 
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** VarAction...
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
 ** CDToD...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DpUA0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** VarAction...
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiB0p[]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiA0m[]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiB0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP[-a, -b, -c, -d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaP[-a, -c, -d]. 
** DefTensor: Defining tensor TPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor RPerp[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor TLambdaPerp[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
** DefTensor: Defining tensor RLambdaPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB0p[]. 
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
 ** ToO3...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DV[-a, -j]. 
** DefTensor: Defining tensor DJ[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor DpJ[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpV[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DRP0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRP2p.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** ToOrderCanonical: order Infinity...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0p[-z]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DRP0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** ToO3...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** CDToD...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor Q[-a, -b]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
 ** VarAction...
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
 ** PoissonBracket: Finding barred derivatives...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** CDToD...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiSingB0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiSingA1m[-a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DHComp[-z]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor CDAInert[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** ToO3...
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
 ** CDToD...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA0m[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA1m[-a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor UA0m[]. 
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToO3...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PThreePara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DRP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
** DefTensor: Defining tensor PThreePerp[-a, -b, -c, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPerp[-a, -b, d, e, f]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PAPara[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PBPerp[-a, d, e]. 
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor PBPara[-a, -b, d, e]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0p[c, d]. 
** DefTensor: Defining tensor PA1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PA2p[-a, -b, c, d]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PA0m[d, e, f]. 
** DefTensor: Defining tensor PA1m[-a, d, e, f]. 
** DefTensor: Defining tensor PA2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** ToO3...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0p[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** CDToD...
 ** VarAction...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** CDToD...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor PB0p[c, d]. 
** DefTensor: Defining tensor PB1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PB2p[-a, -b, c, d]. 
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor PB1m[-a, d]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PB0pT[-n, -m, a, c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor PB1pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB2pT[-n, -m, a, c]. 
** DefTensor: Defining tensor PB1mT[-n, -m, a, c]. 
** DefTensor: Defining tensor PA0pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1pT[-n, -m, -o, a, b, c]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PA2pT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor PA0mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor PA1mT[-n, -m, -o, a, b, c]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor PA2mT[-n, -m, -o, a, b, c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CompleteO3ProjectionsToggle.mx...
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor TP0m[]. 
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefConstantSymbol: Defining constant symbol cPerpA0p. 
** DefConstantSymbol: Defining constant symbol cPerpA0m. 
** DefConstantSymbol: Defining constant symbol cPerpA1p. 
** DefConstantSymbol: Defining constant symbol cPerpA1m. 
** DefConstantSymbol: Defining constant symbol cPerpA2p. 
** DefConstantSymbol: Defining constant symbol cPerpA2m. 
** DefConstantSymbol: Defining constant symbol cPerpB0p. 
** DefConstantSymbol: Defining constant symbol cPerpB0m. 
** DefConstantSymbol: Defining constant symbol cPerpB1p. 
** DefConstantSymbol: Defining constant symbol cPerpB1m. 
** DefConstantSymbol: Defining constant symbol cPerpB2p. 
** DefConstantSymbol: Defining constant symbol cPerpB2m. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ProjectionNormalisationsToggle.mx...
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor RP1m[-a]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** BuildHiGGS: The unit test labelled ProjectionNormalisationsCheckToggle\
 
>   has been ignored.
** DefConstantSymbol: Defining constant symbol BetPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPerp2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpPerpToggle.mx has been\
 
>   ignored.
** DefTensor: Defining tensor PT0m[d, e, f]. 
** DefTensor: Defining tensor PT1p[-a, -b, c, d]. 
** DefTensor: Defining tensor PT1m[-a, d, e, f]. 
** DefTensor: Defining tensor PT2m[-a, -b, -c, d, e, f]. 
** DefTensor: Defining tensor PR0p[e, f, g, h]. 
** DefTensor: Defining tensor PR0m[e, f, g]. 
** DefTensor: Defining tensor PR1p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PR2p[-n, -m, e, f, g, h]. 
** DefTensor: Defining tensor PR2m[-n, -m, -o, e, f, g]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor TP1p[-a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor TP1m[-a]. 
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RP0p[]. 
** DefTensor: Defining tensor RP0m[]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor RP1p[-a, -b]. 
 ** ToO3...
** DefTensor: Defining tensor RP1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RP2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
** DefTensor: Defining tensor DHComp[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToO3...
 ** ToO3...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
 ** CollapseA...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** VarAction...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} ≈ {0, 0, 0}
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
 ** ToO3...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpRP0p[-z]. 
** DefConstantSymbol: Defining constant symbol cParaA0p. 
** DefConstantSymbol: Defining constant symbol cParaA0m. 
** DefConstantSymbol: Defining constant symbol cParaA1p. 
** DefConstantSymbol: Defining constant symbol cParaA1m. 
** DefConstantSymbol: Defining constant symbol cParaA2p. 
** DefConstantSymbol: Defining constant symbol cParaA2m. 
** DefConstantSymbol: Defining constant symbol cParaB0p. 
** DefConstantSymbol: Defining constant symbol cParaB0m. 
** DefConstantSymbol: Defining constant symbol cParaB1p. 
** DefConstantSymbol: Defining constant symbol cParaB1m. 
** DefConstantSymbol: Defining constant symbol cParaB2p. 
** DefConstantSymbol: Defining constant symbol cParaB2m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara0m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara1m. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2p. 
** DefConstantSymbol: Defining constant symbol AlpPerpPara2m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara0m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara1m. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2p. 
** DefConstantSymbol: Defining constant symbol BetPerpPara2m. 
 ** BuildHiGGS: The binary at\
 
>   ./xAct/HiGGS/bin/build/TransferCouplingsPerpParaToggle.mx has been\
 
>   ignored.
** DefConstantSymbol: Defining constant symbol AlpParaPerp0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPerp2m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp0m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp1m. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2p. 
** DefConstantSymbol: Defining constant symbol BetParaPerp2m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara0m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara1m. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2p. 
** DefConstantSymbol: Defining constant symbol AlpParaPara2m. 
** DefConstantSymbol: Defining constant symbol BetParaPara0p. 
** DefConstantSymbol: Defining constant symbol BetParaPara0m. 
** DefConstantSymbol: Defining constant symbol BetParaPara1p. 
** DefConstantSymbol: Defining constant symbol BetParaPara1m. 
** DefConstantSymbol: Defining constant symbol BetParaPara2p. 
** DefConstantSymbol: Defining constant symbol BetParaPara2m. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor PPerpTPerp[-e, a, b]. 
** DefTensor: Defining tensor PPerpTPara[-e, -f, a, b]. 
** DefTensor: Defining tensor PPerpRPerp[-e, -f, a, b, c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor PPerpRPara[-e, -f, -g, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpRP2p.
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PPerpT0p[e, f]. 
** DefTensor: Defining tensor PPerpT1p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpT1m[-a, e, f]. 
** DefTensor: Defining tensor PPerpT2p[-a, -b, e, f]. 
** DefTensor: Defining tensor PPerpR0p[e, f]. 
** DefTensor: Defining tensor PPerpR0m[e, f, g]. 
** DefTensor: Defining tensor PPerpR1p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR1m[-n, e, f, g]. 
** DefTensor: Defining tensor PPerpR2p[-n, -m, e, f]. 
** DefTensor: Defining tensor PPerpR2m[-n, -m, -o, e, f, g]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** PoissonBracket {PhiB1m[-i], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** CDToD...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiB0p[]. 
** DefTensor: Defining tensor PhiB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA0p[]. 
** DefTensor: Defining tensor PhiA0m[]. 
** DefTensor: Defining tensor PhiA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor PhiA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiA2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
** DefTensor: Defining tensor RLambdaP0m[]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToO3...
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PhiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor BPhi[-a, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor APhi[-a, -b, -c]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRP0p[-z]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** CDBToDJDV...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
 ** CDToD...
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
** DefTensor: Defining tensor RPerp1m[-a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CanonicalPhiToggle.mx...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor TPerp1m[-a]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** CDToD...
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
** DefTensor: Defining tensor DpRP0m[-z]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
   Rules {1, 2} have been declared as DownValues for TPerp2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NonCanonicalPhiToggle.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** PoissonBracket {PhiB1m[-i], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor RPerp0m[]. 
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp1m[-a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** ToO3...
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB0p[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiB1p[-a, -b]. 
** DefTensor: Defining tensor ChiB1m[-a]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor ChiB2p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiA0p[]. 
** DefTensor: Defining tensor ChiA0m[]. 
** DefTensor: Defining tensor ChiA1p[-a, -b]. 
** DefTensor: Defining tensor ChiA1m[-a]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor ChiA2p[-a, -b]. 
** DefTensor: Defining tensor ChiA2m[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiA2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor QD[-a, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JD[-a, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor S1[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor S2[-a]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor S3[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QD[-a, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor JD[-a, -y, -z]. 
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** CollapseA...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
 ** ToNewCanonical...
 ** CDToD...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** VarAction...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToBasicForm...
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
** DefTensor: Defining tensor RLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 

** DefTensor: Defining tensor RLambdaPerp0m[]. 
Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} ≈ {0, 0, 0}
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** CDToD...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0p[]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiPerpB1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpB2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA0p[]. 
** DefTensor: Defining tensor ChiPerpA0m[]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
** DefTensor: Defining tensor ChiPerpA1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA1m[-a]. 
** DefTensor: Defining tensor ChiPerpA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiPerpA2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiPerpA2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** CollapseA...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** VarAction...
 ** ToO3...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67279240 bytes in RAM.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67298488 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:= ** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiPerpA2m.
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
** DefTensor: Defining tensor BChiPerp[-a, -c]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor AChiPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiPerpToggle.mx...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 

In[24]:= In[24]:=          ** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
                  
In[25]:= 
In[26]:= ** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 

In[27]:= ** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB0p[]. 
** DefTensor: Defining tensor ChiSingB1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiSingB2p[-a, -b]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor ChiSingA0p[]. 
** DefTensor: Defining tensor ChiSingA0m[]. 
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor ChiSingA1p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA1m[-a]. 
** DefTensor: Defining tensor ChiSingA2p[-a, -b]. 
** DefTensor: Defining tensor ChiSingA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiSingA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor QD[-a, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JD[-a, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}
 ** ToNewCanonical...

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor S1[-a]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor S2[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
** DefTensor: Defining tensor S3[-a]. 
 ** ToO3...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
Pseudo-terminal will not be allocated because stdin is not a terminal.
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1m[-i], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Pseudo-terminal will not be allocated because stdin is not a terminal.
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** CollapseA...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
 ** VarAction...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** VarAction...
ssh_exchange_identification: Connection closed by remote host
lost connection
ssh_exchange_identification: Connection closed by remote host
 ** ToNewCanonical...
lost connection
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
ssh_exchange_identification: Connection closed by remote host
lost connection
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** ToBasicForm...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** VarAction...
ssh_exchange_identification: Connection closed by remote host
lost connection
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
ssh_exchange_identification: Connection closed by remote host
lost connection
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
ssh_exchange_identification: Connection closed by remote host
lost connection
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
ssh_exchange_identification: Connection closed by remote host
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
lost connection
 ** ToNewCanonical...
 ** VarAction...
ssh_exchange_identification: Connection closed by remote host
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
lost connection
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
ssh_exchange_identification: Connection closed by remote host
lost connection
 ** VarAction...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** VarAction...
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiSingA2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor BChiSingExtra[-a, -c]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} ≈ {0, 0, 0}
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor AChiSingExtra[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/ChiSingToggle.mx...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

 ** CDToD...
BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToNewCanonical...

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67279072 bytes in RAM.

In[24]:= In[24]:=                   ** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
 ** TotalToO3 with ToShell True and Order Infinity...
         
In[25]:= 
In[26]:= 
In[27]:=  ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB0p[]. 
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor UB1p[-a, -b]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor UB1m[-a]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor UB2p[-a, -b]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
 ** VarAction...
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
** DefTensor: Defining tensor UA0p[]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor UA0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor UA1m[-a]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor UA2p[-a, -b]. 
** DefTensor: Defining tensor UA2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for UA2m.
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for UA2m.
** DefTensor: Defining tensor DpHComp[-z]. 
   Rules {1, 2} have been declared as DownValues for UB2p.
   Rules {1, 2} have been declared as DownValues for UA2p.
** DefTensor: Defining tensor PiPB0p[]. 
** DefTensor: Defining tensor PiPB1p[-a, -b]. 
** DefTensor: Defining tensor PiPB1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PiPB2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor PiPA0p[]. 
** DefTensor: Defining tensor PiPA0m[]. 
** DefTensor: Defining tensor PiPA1p[-a, -b]. 
** DefTensor: Defining tensor PiPA1m[-a]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PiPA2p[-a, -b]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor PiPA2m[-a, -b, -c]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 

(gnome-ssh-askpass:247892): Gtk-WARNING **: 12:27:13.569: cannot open display: localhost:108.0

(gnome-ssh-askpass:247901): Gtk-WARNING **: 12:27:13.569: cannot open display: localhost:108.0

(gnome-ssh-askpass:247904): Gtk-WARNING **: 12:27:13.569: cannot open display: localhost:108.0

(gnome-ssh-askpass:247886): Gtk-WARNING **: 12:27:13.569: cannot open display: localhost:108.0

(gnome-ssh-askpass:247887): Gtk-WARNING **: 12:27:13.569: cannot open display: localhost:108.0

(gnome-ssh-askpass:247910): Gtk-WARNING **: 12:27:13.569: cannot open display: localhost:108.0

(gnome-ssh-askpass:247908): Gtk-WARNING **: 12:27:13.569: cannot open display: localhost:108.0
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
 ** ToNewCanonical...
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.

(gnome-ssh-askpass:247905): Gtk-WARNING **: 12:27:13.574: cannot open display: localhost:108.0

(gnome-ssh-askpass:247889): Gtk-WARNING **: 12:27:13.574: cannot open display: localhost:108.0

(gnome-ssh-askpass:247893): Gtk-WARNING **: 12:27:13.574: cannot open display: localhost:108.0

(gnome-ssh-askpass:247911): Gtk-WARNING **: 12:27:13.574: cannot open display: localhost:108.0

(gnome-ssh-askpass:247912): Gtk-WARNING **: 12:27:13.574: cannot open display: localhost:108.0

(gnome-ssh-askpass:247899): Gtk-WARNING **: 12:27:13.574: cannot open display: localhost:108.0

(gnome-ssh-askpass:247900): Gtk-WARNING **: 12:27:13.574: cannot open display: localhost:108.0
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1m[-i], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...

(gnome-ssh-askpass:247909): Gtk-WARNING **: 12:27:13.667: cannot open display: localhost:108.0
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} ≈ {0, 0, 0}
 ** PoissonBracket: BasicForm to be evaluated is:

(gnome-ssh-askpass:247906): Gtk-WARNING **: 12:27:13.669: cannot open display: localhost:108.0
Permission denied, please try again.
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
Permission denied, please try again.
 ** ToNewCanonical...

(gnome-ssh-askpass:247891): Gtk-WARNING **: 12:27:13.676: cannot open display: localhost:108.0
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67298224 bytes in RAM.

In[24]:= In[24]:=           ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...

(gnome-ssh-askpass:247902): Gtk-WARNING **: 12:27:13.681: cannot open display: localhost:108.0
** DefTensor: Defining tensor ChiParaB0m[]. 
                  
In[25]:= 
In[26]:= 
(gnome-ssh-askpass:247907): Gtk-WARNING **: 12:27:13.681: cannot open display: localhost:108.0

In[27]:= Permission denied, please try again.
Permission denied, please try again.
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
Permission denied, please try again.

(gnome-ssh-askpass:247897): Gtk-WARNING **: 12:27:13.678: cannot open display: localhost:108.0
Permission denied, please try again.
 ** ToNewCanonical...

(gnome-ssh-askpass:247888): Gtk-WARNING **: 12:27:13.702: cannot open display: localhost:108.0
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1m[-a]. 

(gnome-ssh-askpass:247895): Gtk-WARNING **: 12:27:13.717: cannot open display: localhost:108.0
Permission denied, please try again.

(gnome-ssh-askpass:247890): Gtk-WARNING **: 12:27:13.714: cannot open display: localhost:108.0
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
Permission denied, please try again.
Permission denied, please try again.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67276488 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:= {{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67281816 bytes in RAM.

In[24]:= In[24]:=                   ** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
         
In[25]:= 
In[26]:= {{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}

In[27]:= {{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** VarAction...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
			(...replotting...)
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
			(...replotting...)
 ** ToNewCanonical...
			(...replotting...)
			(...replotting...)
			(...replotting...)
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
			(...replotting...)
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
			(...replotting...)
 ** ToNewCanonical...
			(...replotting...)
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
			(...replotting...)
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} ≈ {0, 0, 0}
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** VarAction...
 ** VarAction...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for PiPA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for PiPB2p.
   Rules {1, 2} have been declared as DownValues for PiPA2p.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor TP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1p[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TP1m[-a]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TP2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor RP0p[]. 
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor RP0m[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor RP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2p[-a, -b]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RP2m[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for TP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
 ** CDToD...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA0m[]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpHComp[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** ToBasicForm...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** CDToD...
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA2m[-l, -m, -n]} ≈ {0, 0, 0}
 ** ToNewCanonical...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** ToOrderCanonical: order Infinity...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor KX[-a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TP2m.
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
** DefTensor: Defining tensor DummyGradient[-z]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor S3[-a]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefConstantSymbol: Defining constant symbol dummy. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
 ** VarAction...
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefConstantSymbol: Defining constant symbol dummy. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor DpTLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpTLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
 ** VarAction...
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
** DefTensor: Defining tensor DpTLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<86>>}
 
>    have been declared as UpValues for TP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for RP2m.
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
   Rules {1, 2} have been declared as DownValues for DpTLambdaPerp2p.
** DefTensor: Defining tensor DpRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaPerp0m[-z]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...

(gnome-ssh-askpass:247915): Gtk-WARNING **: 12:27:19.217: cannot open display: localhost:108.0
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
Permission denied, please try again.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...

(gnome-ssh-askpass:247933): Gtk-WARNING **: 12:27:19.224: cannot open display: localhost:108.0
Permission denied, please try again.
 ** ToNewCanonical...

(gnome-ssh-askpass:247918): Gtk-WARNING **: 12:27:19.259: cannot open display: localhost:108.0
 ** ToNewCanonical...
Permission denied, please try again.
** DefTensor: Defining tensor DpRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 

(gnome-ssh-askpass:247934): Gtk-WARNING **: 12:27:19.249: cannot open display: localhost:108.0
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
Permission denied, please try again.

(gnome-ssh-askpass:247931): Gtk-WARNING **: 12:27:19.260: cannot open display: localhost:108.0
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Permission denied, please try again.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
 ** ToNewCanonical...

(gnome-ssh-askpass:247928): Gtk-WARNING **: 12:27:19.268: cannot open display: localhost:108.0
 ** ToNewCanonical...

(gnome-ssh-askpass:247920): Gtk-WARNING **: 12:27:19.284: cannot open display: localhost:108.0
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
Permission denied, please try again.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...

(gnome-ssh-askpass:247919): Gtk-WARNING **: 12:27:19.315: cannot open display: localhost:108.0

(gnome-ssh-askpass:247932): Gtk-WARNING **: 12:27:19.316: cannot open display: localhost:108.0
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
Permission denied, please try again.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
Permission denied, please try again.
 ** ToNewCanonical...
Permission denied, please try again.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...

(gnome-ssh-askpass:247929): Gtk-WARNING **: 12:27:19.306: cannot open display: localhost:108.0
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
Permission denied, please try again.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...

(gnome-ssh-askpass:247924): Gtk-WARNING **: 12:27:19.317: cannot open display: localhost:108.0
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}

(gnome-ssh-askpass:247930): Gtk-WARNING **: 12:27:19.324: cannot open display: localhost:108.0
Permission denied, please try again.

(gnome-ssh-askpass:247923): Gtk-WARNING **: 12:27:19.340: cannot open display: localhost:108.0

(gnome-ssh-askpass:247921): Gtk-WARNING **: 12:27:19.350: cannot open display: localhost:108.0

(gnome-ssh-askpass:247925): Gtk-WARNING **: 12:27:19.350: cannot open display: localhost:108.0

(gnome-ssh-askpass:247916): Gtk-WARNING **: 12:27:19.351: cannot open display: localhost:108.0

(gnome-ssh-askpass:247927): Gtk-WARNING **: 12:27:19.350: cannot open display: localhost:108.0
** DefTensor: Defining tensor JD[-a, -y, -z]. 
Permission denied, please try again.
 ** VarAction...
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DpRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 

(gnome-ssh-askpass:247937): Gtk-WARNING **: 12:27:19.355: cannot open display: localhost:108.0

(gnome-ssh-askpass:247917): Gtk-WARNING **: 12:27:19.393: cannot open display: localhost:108.0

(gnome-ssh-askpass:247922): Gtk-WARNING **: 12:27:19.395: cannot open display: localhost:108.0
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
Permission denied, please try again.
Permission denied, please try again.
Permission denied, please try again.

(gnome-ssh-askpass:247935): Gtk-WARNING **: 12:27:19.398: cannot open display: localhost:108.0

(gnome-ssh-askpass:247936): Gtk-WARNING **: 12:27:19.400: cannot open display: localhost:108.0
Permission denied, please try again.
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
Permission denied, please try again.
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 

(gnome-ssh-askpass:247926): Gtk-WARNING **: 12:27:19.452: cannot open display: localhost:108.0
Permission denied, please try again.
** DefTensor: Defining tensor DpRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DpRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
** DefTensor: Defining tensor S1[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor S2[-a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** VarAction...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaPerp2m.
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefConstantSymbol: Defining constant symbol dummy. 
 ** VarAction...
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor S1[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor S2[-a]. 
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor S3[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToBasicForm...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1m[-i], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1m[-i], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1m[-i], PhiB1m[-l]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67293112 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RP2p.
** DefTensor: Defining tensor PTPerp[-e, -f, a, b, c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor PTPara[-e, -f, -g, a, b, c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor PRPerp[-e, -f, -g, a, b, c, d]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor PRPara[-e, -f, -g, -h, a, b, c, d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67299704 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** ToNewCanonical...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP0m[]. 
** DefTensor: Defining tensor TLambdaP1p[-a, -b]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaP1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor TLambdaP2m[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaPerp2m.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2} have been declared as DownValues for DpRLambdaPerp2p.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0p[]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP0m[]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP1p[-a, -b]. 
 ** PoissonBracket: BasicForm to be evaluated is:
 ** VarAction...
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
** DefTensor: Defining tensor RLambdaP1m[-a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67301536 bytes in RAM.

In[24]:= In[24]:=           ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2p[-a, -b]. 
                  
In[25]:= 
In[26]:= 
In[27]:=  ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaP2m[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaP2m.
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   -4 Bet1 A[-l, -a, -a1] H[a, a1] + 
 
>    B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-l] - 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-l, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-l] CD[-b1][B[-b, -a1]]}
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
 ** ToNewCanonical...
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67277976 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpHComp[-z]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
** DefTensor: Defining tensor SuperHamiltonian0p[]. 
** DefTensor: Defining tensor DpPiPB0p[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaP2m.
   Rules {1, 2} have been declared as DownValues for RLambdaP2p.
   Rules {1, 2, 3, 4} have been declared as DownValues for TLambdaP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUB0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUB1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
 ** PoissonBracket: Finding barred derivatives...
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for TLambdaP2m.
 ** VarAction...
** DefTensor: Defining tensor TPerp0p[]. 
** DefTensor: Defining tensor TPerp1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TPerp1m[-a]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TPerp2p[-a, -b]. 
** DefTensor: Defining tensor RPerp0p[]. 
** DefTensor: Defining tensor RPerp0m[]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp1p[-a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerp1m[-a]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerp2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor RPerp2m[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for TPerp2p.
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for RPerp2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
 ** VarAction...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 

(gnome-ssh-askpass:247967): Gtk-WARNING **: 12:27:28.839: cannot open display: localhost:108.0

(gnome-ssh-askpass:247953): Gtk-WARNING **: 12:27:28.839: cannot open display: localhost:108.0
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection

(gnome-ssh-askpass:247960): Gtk-WARNING **: 12:27:28.861: cannot open display: localhost:108.0

(gnome-ssh-askpass:247954): Gtk-WARNING **: 12:27:28.869: cannot open display: localhost:108.0
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection

(gnome-ssh-askpass:247957): Gtk-WARNING **: 12:27:28.848: cannot open display: localhost:108.0

(gnome-ssh-askpass:247968): Gtk-WARNING **: 12:27:28.860: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:247959): Gtk-WARNING **: 12:27:28.872: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:247970): Gtk-WARNING **: 12:27:28.887: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:247965): Gtk-WARNING **: 12:27:28.902: cannot open display: localhost:108.0

(gnome-ssh-askpass:247958): Gtk-WARNING **: 12:27:28.902: cannot open display: localhost:108.0
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection

(gnome-ssh-askpass:247955): Gtk-WARNING **: 12:27:28.931: cannot open display: localhost:108.0

(gnome-ssh-askpass:247966): Gtk-WARNING **: 12:27:28.932: cannot open display: localhost:108.0
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection

(gnome-ssh-askpass:247961): Gtk-WARNING **: 12:27:28.944: cannot open display: localhost:108.0

(gnome-ssh-askpass:247964): Gtk-WARNING **: 12:27:28.944: cannot open display: localhost:108.0

(gnome-ssh-askpass:247949): Gtk-WARNING **: 12:27:28.944: cannot open display: localhost:108.0

(gnome-ssh-askpass:247963): Gtk-WARNING **: 12:27:28.944: cannot open display: localhost:108.0

(gnome-ssh-askpass:247948): Gtk-WARNING **: 12:27:28.956: cannot open display: localhost:108.0

(gnome-ssh-askpass:247950): Gtk-WARNING **: 12:27:28.957: cannot open display: localhost:108.0

(gnome-ssh-askpass:247962): Gtk-WARNING **: 12:27:28.956: cannot open display: localhost:108.0

(gnome-ssh-askpass:247969): Gtk-WARNING **: 12:27:28.939: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
Permission denied (publickey,password).
lost connection
lost connection
lost connection
lost connection
lost connection
lost connection
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:247951): Gtk-WARNING **: 12:27:28.966: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:247952): Gtk-WARNING **: 12:27:28.967: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection

(gnome-ssh-askpass:247956): Gtk-WARNING **: 12:27:28.991: cannot open display: localhost:108.0
Permission denied (publickey,password).
lost connection
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RPerp2m.
   Rules {1, 2} have been declared as DownValues for RPerp2p.
** DefTensor: Defining tensor TLambdaPerp0p[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** CDToD...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
** DefTensor: Defining tensor ChiParaB0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaA1m[-a]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor TLambdaPerp1m[-a]. 
** DefTensor: Defining tensor TLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp0p[]. 
** DefTensor: Defining tensor RLambdaPerp0m[]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1p[-a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerp1m[-a]. 
** DefTensor: Defining tensor RLambdaPerp2p[-a, -b]. 
** DefTensor: Defining tensor RLambdaPerp2m[-a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for RLambdaPerp2m.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...

In[2]:= In[2]:= 
In[3]:= 
In[4]:= 
In[5]:= 
In[6]:= 
In[7]:= 
In[8]:= 
In[9]:= 
In[10]:= 
In[11]:= 
In[12]:= 
In[13]:= 
In[14]:= 
In[15]:= 
In[16]:= 
In[17]:= 
In[18]:= In[18]:= In[18]:= In[18]:= 
In[19]:=                   
In[20]:= 
In[21]:=  ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
 ** VarAction...
 ** VarAction...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToBasicForm...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** VarAction...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor LinearSuperMomentum1m[-a]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1m[-a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RotationalSuperMomentum1p[-a, -b]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for RLambdaPerp2m.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for RLambdaPerp2p.
   Rules {1, 2} have been declared as DownValues for TLambdaPerp2p.
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPShellPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor RPShellPerp[-a, -b, -c]. 
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor PerpBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigBComplement[-i, -k]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingBComplement[-i, -k]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor PerpAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor OrigAComplement[-i, -j, -k]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor SingAComplement[-i, -j, -k]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/GeneralComplementsToggle.mx...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
			(...replotting...)
			(...replotting...)
 ** ToNewCanonical...
			(...replotting...)
			(...replotting...)
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/CDPiPToCDPiPO3.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
			(...replotting...)
			(...replotting...)
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
			(...replotting...)
 ** VarAction...
 ** ToNewCanonical...
			(...replotting...)
			(...replotting...)
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
			(...replotting...)
 ** VarAction...
 ** VarAction...
			(...replotting...)
			(...replotting...)
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
			(...replotting...)
 ** ToNewCanonical...
			(...replotting...)
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/NesterFormIfConstraints.mx...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
			(...replotting...)
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
			(...replotting...)
			(...replotting...)
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor KX[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor KKX[-a, -b, -c, -d]. 
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor KXP[-a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor KKXP[-a, -b, -c, -d]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyGradient[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DummyHessian[-z, -w]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPPara[-a, -b, -c, -d]. 
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DummyGradientGreek[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DummyHessianGreek[-z, -w]. 
** DefTensor: Defining tensor RPPerp[-a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor RD[a, b, -d, -e, -x, -y, -z]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS1[a, b, -d, -e, -x, -y, -z, v]. 
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RDS2[a, b, -d, -e, -x, -y, -z, v]. 
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RDS3[a, b, -d, -e, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor TD[a, -b, -c, -x, -y, -z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToO3...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS1[a, -b, -c, -x, -y, -z, v]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS2[a, -b, -c, -x, -y, -z, v]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToNewCanonical...
** DefTensor: Defining tensor TDS3[a, -b, -c, -x, -y, -z, v, w]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor PhiDB0p[-x, -y, -z]. 
 ** VarAction...
** DefTensor: Defining tensor PhiDS1B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3B1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2B1m[-a, -x, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
** DefTensor: Defining tensor PhiDS3B1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDB2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1B2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor DPiPB0p[-z]. 
** DefTensor: Defining tensor PhiDS2B2p[-a, -b, -x, -y, -z, v]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3B2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor PhiDA0p[-x, -y, -z]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
** DefTensor: Defining tensor PhiDS1A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS2A0p[-x, -y, -z, v]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor PhiDS3A0p[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor PhiDA0m[-x, -y, -z]. 
** DefTensor: Defining tensor DUB0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
** DefTensor: Defining tensor PhiDS1A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A0m[-x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A0m[-x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA1m[-a, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A1m[-a, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A1m[-a, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2p[-a, -b, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2p[-a, -b, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2p[-a, -b, -x, -y, -z, v, w]. 
** DefTensor: Defining tensor PhiDA2m[-a, -b, -c, -x, -y, -z]. 
** DefTensor: Defining tensor PhiDS1A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS2A2m[-a, -b, -c, -x, -y, -z, v]. 
** DefTensor: Defining tensor PhiDS3A2m[-a, -b, -c, -x, -y, -z, v, w]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDA2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS1A2m.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS2A2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for PhiDS3A2m.
** DefTensor: Defining tensor QD[-a, -y, -z]. 
** DefTensor: Defining tensor QDS1[-a, -y, -z, v]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor QDS2[-a, -y, -z, v]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor QDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor JD[-a, -y, -z]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor JDS1[-a, -y, -z, v]. 
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor JDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor JDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor LapseD[-a, -y, -z]. 
** DefTensor: Defining tensor LapseDS1[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS2[-a, -y, -z, v]. 
** DefTensor: Defining tensor LapseDS3[-a, -y, -z, v, w]. 
** DefTensor: Defining tensor S1[-a]. 
** DefTensor: Defining tensor S2[-a]. 
** DefTensor: Defining tensor S3[-a]. 
 ** BuildHiGGS: Incorporating the binary at\
 
>   ./xAct/HiGGS/bin/build/VelocityToggle.mx...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPara[-a, -b, -c, -d]. 
 ** VarAction...
** DefTensor: Defining tensor RLambdaPPerp[-a, -b, -c]. 
** DefConstantSymbol: Defining constant symbol dummy. 

Syntax::com: Warning: comma encountered with no adjacent expression. The
     expression will be treated as Null.  (line 5319 of
     "./xAct/HiGGS/HiGGS_sources.m").
 ** BuildHiGGS: The unit test labelled documentation has been ignored.
 ** BuildHiGGS: The context on quitting HiGGS.m is Global`.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB0p[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor RPerpPerp[-a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor RPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
------------------------------------------------------------
Package xAct`xPerm`  version 1.2.3, {2015, 8, 23}
CopyRight (C) 2003-2020, Jose M. Martin-Garcia, under the General Public\
 
>   License.
 ** VarAction...
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** BuildHiGGS: The HiGGS environment is now ready to use and is occupying 
 
>   67281448 bytes in RAM.

In[24]:= In[24]:=                            
In[25]:= 
In[26]:= 
In[27]:=  ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
Connecting to external linux executable...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPerp[-a, -b]. 
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor RLambdaPerpPara[-a, -b, -c]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
{{{{spin_0p, PhiB1p[-i, -j], PhiB1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiB1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA0m[]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiB1m[-i], PhiB1m[-l]}, {spin_0p, PhiB1m[-i], PhiA0m[]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiB1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA0m[], PhiA0m[]}, {spin_0p, PhiA0m[], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA1m[-l]}, {spin_0p, PhiA0m[], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA0m[], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1p[-i, -j], PhiA1p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA1m[-i], PhiA1m[-l]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA1m[-i], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2p[-i, -j], PhiA2p[-l, -m]}, 
 
>     {spin_0p, PhiA2p[-i, -j], PhiA2m[-l, -m, -n]}}, 
 
>    {{spin_0p, PhiA2m[-i, -j, -k], PhiA2m[-l, -m, -n]}}}}
 ** VarAction...
{{{EvaluationObject[1, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[2, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[3, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[4, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[5, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[6, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[7, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[8, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[9, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[10, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[11, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[12, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[13, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[14, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[15, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[16, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[17, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[18, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[19, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[20, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[21, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[22, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[23, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[24, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[25, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[26, PoissonBracketParallel[<<4>>], <>], 
 
>     EvaluationObject[27, PoissonBracketParallel[<<4>>], <>]}, 
 
>    {EvaluationObject[28, PoissonBracketParallel[<<4>>], <>]}}}

LaunchKernels::unicore: 
   The default parallel kernel configuration does not launch any kernels on a
    single-core machine.	Use LaunchKernels[n] to launch n kernels anyway.
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiB1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaB0m[]. 
** DefTensor: Defining tensor ChiParaB1p[-a, -b]. 
** DefTensor: Defining tensor ChiParaB1m[-a]. 
** DefTensor: Defining tensor ChiParaB2m[-a, -b, -c]. 
** DefTensor: Defining tensor ChiParaA0p[]. 
** DefTensor: Defining tensor ChiParaA0m[]. 
** DefTensor: Defining tensor ChiParaA1p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA1m[-a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor ChiParaA2p[-a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor ChiParaA2m[-a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaB2m.
 ** VarAction...
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaB2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for ChiParaA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUB0p[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for ChiParaA2m.
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB0p[-z]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPB1m[-z, -a]. 
** DefTensor: Defining tensor DPiPB2p[-z, -a, -b]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DPiPB2p.
** DefTensor: Defining tensor DPiPA0p[-z]. 
** DefTensor: Defining tensor DPiPA0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DPiPA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DPiPA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DPiPA2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA0m[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
Connection established.
------------------------------------------------------------
Package xAct`xTensor`  version 1.2.0, {2021, 10, 17}
CopyRight (C) 2002-2021, Jose M. Martin-Garcia, under the General Public\
 
>   License.
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
------------------------------------------------------------
These packages come with ABSOLUTELY NO WARRANTY; for details type\
 
>   Disclaimer[]. This is free software, and you are welcome to redistribute\
 
>   it under certain conditions. See the General Public License for details.
------------------------------------------------------------
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DPiPA2m.
   Rules {1, 2} have been declared as DownValues for DPiPA2p.
** DefTensor: Defining tensor DpPiPB0p[-z]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
** DefTensor: Defining tensor DpUA0m[-z]. 
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DHComp[-z]. 
** DefTensor: Defining tensor DpTP0m[-z]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
** DefTensor: Defining tensor DpPiPB1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPB1m[-z, -a]. 
 ** ToNewCanonical...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor DpPiPB2p[-z, -a, -b]. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPB2p.
** DefTensor: Defining tensor DpPiPA0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1p[-z, -a, -b]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpPiPA2m[-z, -a, -b, -c]. 
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA1p[-l, -m]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpPiPA2m.
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0p[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** VarAction...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`xPert`  version 1.0.6, {2018, 2, 28}
CopyRight (C) 2005-2020, David Brizuela, Jose M. Martin-Garcia and Guillermo\
 
>   A. Mena Marugan, under the General Public License.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
** Variable $PrePrint assigned value ScreenDollarIndices
** Variable $CovDFormat changed from Prefix to Postfix
** Option AllowUpperDerivatives of ContractMetric changed from False to True
** Option MetricOn of MakeRule changed from None to All
** Option ContractMetrics of MakeRule changed from False to True
 ** TotalToO3 with ToShell True and Order Infinity...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.

General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTP2m.
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0p[-z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP0m[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP1p[-z, -a, -b]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpRP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DpRP2m[-z, -a, -b, -c]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRP2m.
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpPiPA2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpPiPA2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
------------------------------------------------------------
Package xAct`Invar`  version 2.0.5, {2013, 7, 1}
CopyRight (C) 2006-2020, J. M. Martin-Garcia, D. Yllanes and R. Portugal,\
 
>   under the General Public License.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1m[-i], PhiB1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
** DefConstantSymbol: Defining constant symbol sigma. 
** DefConstantSymbol: Defining constant symbol dim. 
** Option CurvatureRelations of DefCovD changed from True to False
** Variable $CommuteCovDsOnScalars changed from True to False
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    APi[-m, -a1, b] B[-l, a] G3[-a, -b] Ji[] V[a1]
>   ---------------------------------------------- - 
                          2
 
     APi[-l, -a1, b] B[-m, a] G3[-a, -b] Ji[] V[a1]
>    ----------------------------------------------}
                           2
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
   Rules {1, 2} have been declared as DownValues for DRP2p.
** DefTensor: Defining tensor DUB1m[-z, -a]. 
------------------------------------------------------------
Package xAct`xCoba`  version 0.8.6, {2021, 2, 28}
CopyRight (C) 2005-2021, David Yllanes and Jose M. Martin-Garcia, under the\
 
>   General Public License.
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
** DefTensor: Defining tensor DRP0p[-z]. 
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP1m[-z, -a]. 
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** VarAction...
** DefTensor: Defining tensor DUB0p[-z]. 
** DefTensor: Defining tensor DUB1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUB1m[-z, -a]. 
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
   Rules {1, 2} have been declared as DownValues for DUB2p.
** DefTensor: Defining tensor DUA0p[-z]. 
** DefTensor: Defining tensor DUA0m[-z]. 
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DUA1p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA1m[-z, -a]. 
** DefTensor: Defining tensor DUA2p[-z, -a, -b]. 
** DefTensor: Defining tensor DUA2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DUA2m.
 ** VarAction...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRP2m.
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DpRP2p.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 ** ToNewCanonical...
 ** ToNewCanonical...
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** PoissonBracket {PhiB1m[-i], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: Finding barred derivatives...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
 ** ToNewCanonical...
 ** ToBasicForm...
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRP2m.
 ** ToNewCanonical...
 ** CollapseA...
   Rules {1, 2} have been declared as DownValues for DRP2p.
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP0m[-z]. 
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DUA2m.
** DefTensor: Defining tensor DTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DUA2p.
** DefTensor: Defining tensor DpUB0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** ToNewCanonical...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB1p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB1m[-z, -a]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUB2p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpUB2p.
** DefTensor: Defining tensor DpUA0p[-z]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA0m[-z]. 
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA1p[-z, -a, -b]. 
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DpUA1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2p[-z, -a, -b]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpUA2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP0m[-z]. 
{PhiB1m[-i], PhiB1m[-l]} ≈ {0, 0, 0}
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpUA2m.
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
** DefTensor: Defining tensor DpTLambdaP1p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiA0m[]} ≈ {0, 0, 0}
** DefTensor: Defining tensor DpTLambdaP1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTLambdaP2m.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
    B[-m, a] BPi[-l, a1] G3[-a, -a1] Ji[]
>   ------------------------------------- - 
                      2
 
     B[-l, a] BPi[-m, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-m, -a1, -a] H[-l, a] V[a1] - 
 
>    2 Bet1 A[-l, -a1, -a] H[-m, a] V[a1] - 
 
     B[-m, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-l]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-m, -b, -a1] H[a, a1] V[-a] V[b] V[-l] + 
 
     B[-l, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-m]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-l, -b, -a1] H[a, a1] V[-a] V[b] V[-m] - 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-l, a] H[-m, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-m, a] V[-a1] V[b1] V[-l] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-l, a] V[-a1] V[b1] V[-m] CD[-b][B[-b1, -a]]}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
 B[-j, a] BPi[-i, a1] G3[-a, -a1] Ji[]
{------------------------------------- - 
                   2
 
     B[-i, a] BPi[-j, a1] G3[-a, -a1] Ji[]
>    ------------------------------------- + 
                       2
 
>    2 Bet1 A[-j, -a1, -a] H[-i, a] V[a1] - 
 
>    2 Bet1 A[-i, -a1, -a] H[-j, a] V[a1] - 
 
     B[-j, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-i]
>    ------------------------------------------------ - 
                            2
 
>    2 Bet1 A[-j, -b, -a1] H[a, a1] V[-a] V[b] V[-i] + 
 
     B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] V[-j]
>    ------------------------------------------------ + 
                            2
 
>    2 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] V[-j] - 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a][B[-b, -a1]] - 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-a][B[-b1, -b]] + 
 
>    2 Bet1 H[-i, a] H[-j, a1] V[b] CD[-a1][B[-b, -a]] + 
 
>    2 Bet1 H[a1, b] H[-j, a] V[-a1] V[b1] V[-i] CD[-b][B[-b1, -a]] - 
 
>    2 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] V[-j] CD[-b][B[-b1, -a]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** VarAction...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTLambdaP2m.
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP0p[-z]. 
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP0m[-z]. 
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
** DefTensor: Defining tensor DRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DRLambdaP2p[-z, -a, -b]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
** DefTensor: Defining tensor DRLambdaP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpUA2m.
   Rules {1, 2} have been declared as DownValues for DpUA2p.
** DefTensor: Defining tensor DTP0m[-z]. 
** DefTensor: Defining tensor DTP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DTP1m[-z, -a]. 
** BuildHiGGS: Defining HiGGS environment for kernel 0. 
** DefTensor: Defining tensor DTP2m[-z, -a, -b, -c]. 
   Rules {1, 2, 3, 4} have been declared as DownValues for DTP2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpTLambdaP2m.
** DefTensor: Defining tensor DpRLambdaP0p[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpRLambdaP0m[-z]. 
** DefTensor: Defining tensor DpRLambdaP1p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP1m[-z, -a]. 
** DefTensor: Defining tensor DpRLambdaP2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpRLambdaP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpRLambdaP2m.
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1p[-i, -j], PhiB1m[-l]} ≈ 
 
        -4 Bet1 DpHComp[-j] FoliG[-i, -l]   4 Bet1 DpHComp[-i] FoliG[-j, -l]
>   {0, --------------------------------- + --------------------------------, 
                       J[]                                J[]
 
>    0}
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaPerp2m.
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaPerp2p.
 ** CDBToDJDV...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DRLambdaP2p.
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DHComp[-z]. 
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP0m[-z]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp0p[-z]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1p[-z, -a, -b]. 
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp1m[-z, -a]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DTLambdaPerp2p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DpTP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DTLambdaPerp2p.
** DefTensor: Defining tensor DRLambdaPerp0p[-z]. 
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp0m[-z]. 
 ** CollapseA...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1p[-z, -a, -b]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp1m[-z, -a]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRLambdaPerp2p[-z, -a, -b]. 
** DefTensor: Defining tensor DpTP2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** VarAction...
** DefTensor: Defining tensor DRLambdaPerp2m[-z, -a, -b, -c]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
   Rules {1, 2, 3, 4} have been declared as DownValues for DRLambdaPerp2m.
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DTP2m.
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
   Rules {1, 2, 3, 4} have been declared as DownValues for DpTP2m.
 ** VarAction...
 ** VarAction...
** DefTensor: Defining tensor DRP0p[-z]. 
 ** VarAction...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP0m[-z]. 
** DefTensor: Defining tensor DRP1p[-z, -a, -b]. 
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP1m[-z, -a]. 
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2p[-z, -a, -b]. 
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
** DefTensor: Defining tensor DRP2m[-z, -a, -b, -c]. 
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1m[-i], PhiB1m[-l]} ≈ {0, 0, 0}
   Rules {1, 2, 3, 4} have been declared as DownValues for DRP2m.
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** PoissonBracket {PhiB1m[-i], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToO3...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** VarAction...
** BuildHiGGS: Defining HiGGS environment for kernel 0. 

BuildHiGGS::built: The HiGGS environment has already been built.
 ** ToNewCanonical...

 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
General::stop: Further output of BuildHiGGS::built
     will be suppressed during this calculation.
 ** ToOrderCanonical: order Infinity...
 ** DefTheory: Incorporating the binary at\
 
>   /home/wb263/HiGGS_development/bin/spin_0pDefTheory.mx
 ** ToNewCanonical...
   Rules {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, <<374>>}
 
>    have been declared as UpValues for DpRLambdaP2m.
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
   Rules {1, 2} have been declared as DownValues for DpRLambdaP2p.
 ** VarAction...
 ** CollapseA...
 ** ToNewCanonical...
 ** PoissonBracket: Finding barred derivatives...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** ToNewCanonical...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket {PhiB1p[-i, -j], PhiA0m[]} with options 
 
>   {ToShell -> True, Hard -> False, Surficial -> False, Order -> Infinity, 
 
>    GToFoliG -> True, PreTruncate -> False, NesterForm -> True, 
 
>    PrintAnswer -> True, Parallel -> False}...
 ** ToBasicForm...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CDBToDJDV...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** CDToD...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** TotalToO3 with ToShell True and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToO3...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** CollapseA...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
{PhiB1m[-i], PhiB1m[-l]} ≈ {0, 0, 0}
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: Finding kernel coefficients...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** PoissonBracket: BasicForm to be evaluated is:
{-4 Bet1 A[-i, -a, -a1] H[a, a1] + 
 
>    B[-i, a] BPi[a1, b] G3[-a, -b] Ji[] V[-a1] + 
 
>    4 Bet1 A[-i, -b, -a1] H[a, a1] V[-a] V[b] - 
 
>    4 Bet1 A[-a, -b, -a1] H[a, a1] V[b] V[-i] - 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-a][B[-a1, -b]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-a][B[-b1, -b]] + 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-a1][B[-b, -b1]] + 
 
>    4 Bet1 H[a1, b] H[-i, a] CD[-b][B[-a1, -a]] - 
 
>    4 Bet1 H[a1, b] H[-i, a] V[-a1] V[b1] CD[-b][B[-b1, -a]] - 
 
>    4 Bet1 H[a, a1] H[b, b1] V[-a] V[-i] CD[-b1][B[-b, -a1]], 
 
>   APi[b1, c, c1] B[a, a1] epsilonG[-a, -b, -b1, -c] G3[-a1, -c1] Ji[] V[b]}
 ** VarAction...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** ToNesterForm with Hard False and Order Infinity and GToFoliG True...
 ** TotalToO3 with Hard False and Order Infinity...
 ** ToOrderCanonical: order Infinity...
 ** ToNewCanonical...
 ** ToNewCanonical...
 ** VarAction...
slurmstepd: error: *** JOB 59546586 ON cpu-e-264 CANCELLED AT 2022-04-27T12:28:03 DUE TO TIME LIMIT ***
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
 ** VarAction...
 ** ToNewCanonical...
slurmstepd: error: *** STEP 59546586.0 ON cpu-e-264 CANCELLED AT 2022-04-27T12:28:04 DUE TO TIME LIMIT ***
 ** ToNewCanonical...
 ** VarAction...
srun: Job step aborted: Waiting up to 122 seconds for job step to finish.
** DefTensor: Defining tensor DUB2p[-z, -a, -b]. 
