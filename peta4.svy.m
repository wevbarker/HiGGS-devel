(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
Run@"rm -rf ./bin/node-*"


(* ::Input::Initialization:: *)
RawJobsBatch={{"spin_0p",{Alp1==0,Alp2==0,Alp3==0,Alp4==0,Alp5==0,2Bet1+Bet2==0,Bet1+2Bet3==0}},
{"spin_0m",{Alp1==0,Alp2==0,Alp4==0,Alp5==0,Alp6==0,2Bet1+Bet2==0,Bet1+2Bet3==0}},
{"simple_spin_1p",{Alp1==0,Alp2==0,Alp3==0,Alp4==0,Alp6==0,Bet1==0,Bet2==0}},
{"simple_spin_1m",{Alp1==0,Alp2==0,Alp3==0,Alp4==0,Alp6==0,Bet1==0,Bet3==0}},{"simple_spin_2m",{Alp2==0,Alp3==0,Alp4==0,Alp5==0,Alp6==0,Bet1==0,Bet2==0,Bet3==0}},{"simple_spin_0-2m_a",{Alp1==0,Alp3==0,Alp4==0,Alp5==0,Alp6==0,Bet1==0,Bet2==0,Bet3==0}},
{"simple_spin_0-2m_b",{Alp2==0,Alp4==0,Alp5==0,Alp6==0,Bet1==0,Bet2==0,Bet3==0}}};


(* ::Input::Initialization:: *)
(*calibratoin survey, Yo&Nester over 10 nodes*)
(**)
For[node=0,node<10,node++,
JobsBatch=({#[[1]]<>"_node_"<>ToString@node,#[[2]]})&/@RawJobsBatch;
Run@("mkdir ./bin/node-"<>ToString@node);
Run@("mkdir ./bin/node-"<>ToString@node<>"/stats");
FileNameJoin@{Directory[],"bin/node-"<>ToString@node,"JobsBatch.mx"}~DumpSave~{JobsBatch};
];
(**)


(* ::Input::Initialization:: *)
(*
Switches=Subsets@{{cAlp1==0,"A1"},{cAlp2\[Equal]0,"A2"},{cAlp3\[Equal]0,"A3"},{cAlp4\[Equal]0,"A4"},{cAlp5\[Equal]0,"A5"},{cAlp6\[Equal]0,"A6"},{cBet1\[Equal]0,"B1"},{cBet2\[Equal]0,"B2"},{cBet3\[Equal]0,"B3"}};
AllTheories={};
Combos[conds_,combo_]:=Module[{extraconds,extralabel},
extraconds=#[[1]]&/@combo;
extralabel=StringJoin@(#[[2]]&/@combo);
{conds[[1]]<>extralabel,conds[[2]]~Join~extraconds}];
C1=Combos[RawJobsBatch[[3]],#]&/@Switches;
C2={};
C3={};
(*
C2=Combos[RawJobsBatch[[4]],#]&/@Switches;
C3=Combos[RawJobsBatch[[5]],#]&/@Switches;
*)
AllTheories=Join[C1,C2,C3];
AllTheories=RandomSample@AllTheories;
AllTheories=AllTheories~Partition~UpTo[37]
Length@AllTheories
For[node=0,node<Length@AllTheories,node++,
JobsBatch=AllTheories[[node+1]];
Run@("mkdir ./bin/node-"<>ToString@node);
Run@("mkdir ./bin/node-"<>ToString@node<>"/stats");
FileNameJoin@{Directory[],"bin/node-"<>ToString@node,"JobsBatch.mx"}~DumpSave~{JobsBatch};
];
Length@AllTheories
*)


(* ::Input::Initialization:: *)
Quit[];
